{"title": "Binary Search Trees", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Binary Search Trees"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "A "}, {"attributes": {"color": "#47a1b3"}, "insert": "binary search tree"}, {"insert": " is a "}, {"attributes": {"link": "#Trees"}, "insert": "tree"}, {"insert": " with the following properties:\n\nEach vertex has at most two children"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"insert": "Each vertex stores some numerical value"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"insert": "For every vertex in the tree with value "}, {"attributes": {"color": "#47a1b3"}, "insert": "x"}, {"insert": ", all of its left children have value less than "}, {"attributes": {"color": "#47a1b3"}, "insert": "x"}, {"insert": ", and all of its right children have value greater than "}, {"attributes": {"color": "#47a1b3"}, "insert": "x"}, {"insert": "."}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"insert": "\nThese properties make searching in"}, {"attributes": {"color": "#47a1b3"}, "insert": " binary search trees"}, {"insert": " particularly easy; if we are searching for the location of some value "}, {"attributes": {"color": "#47a1b3"}, "insert": "y"}, {"insert": " in the tree, then we simply consider the value "}, {"attributes": {"color": "#47a1b3"}, "insert": "x"}, {"insert": " at the root of the tree. If "}, {"attributes": {"color": "#47a1b3"}, "insert": "x = y"}, {"insert": ", then terminate as we have found our value. If not, then if "}, {"attributes": {"color": "#47a1b3"}, "insert": "x < y"}, {"insert": ", recurse on the left child. Otherwise, recurse on the right. This gives us the location of "}, {"attributes": {"color": "#47a1b3"}, "insert": "y"}, {"insert": " in "}, {"attributes": {"color": "#98add9"}, "insert": "O(log(n))"}, {"insert": " time.\n\nSome important uses of "}, {"attributes": {"color": "#47a1b3"}, "insert": "binary search trees"}, {"insert": " in the "}, {"attributes": {"link": "#Algorithms_and_Data_Structures"}, "insert": "ADS"}, {"insert": " course include:\n"}, {"attributes": {"link": "#Red_Black_Trees"}, "insert": "Red-Black trees"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"attributes": {"link": "#Splay_Trees"}, "insert": "Splay trees"}, {"attributes": {"list": "bullet"}, "insert": "\n"}]}, "text": "Binary Search Trees\n\nA binary search tree is a tree with the following properties:\n\n\n\n\nEach vertex has at most two children\nEach vertex stores some numerical value\nFor every vertex in the tree with value x, all of its left children have value less than x, and all of its right children have value greater than x.\n\n\n\n\nThese properties make searching in binary search trees particularly easy; if we are searching for the location of some value y in the tree, then we simply consider the value x at the root of the tree. If x = y, then terminate as we have found our value. If not, then if x < y, recurse on the left child. Otherwise, recurse on the right. This gives us the location of y in O(log(n)) time.\n\n\n\n\nSome important uses of binary search trees in the ADS course include:\n\nRed-Black trees\nSplay trees", "updatedAt": 1714593355016, "embeddings": ["-1.0112711", "-0.73776877", "1.6294311", "-0.42725733", "-0.7367389", "3.2068484", "-0.41596887", "-0.43363464", "-2.060842", "0.041485805", "0.43717608", "2.5946465", "-0.07734451", "-0.30846906", "0.6935266", "-3.3116453", "-2.4772775", "-0.057830963", "1.4992001", "-0.56066376", "0.370808", "0.44039452", "-0.12452759", "-0.38063353", "-1.5119313", "1.2142851", "0.75636303", "0.68958586", "-1.2472554", "-0.5242807", "-2.3063529", "0.55421066", "0.8195416", "0.70391536", "-0.049794924", "-2.838102", "2.138774", "1.335729", "0.54582477", "-1.1888", "-1.9059441", "-0.69127125", "-1.1764499", "-1.5029728", "0.14944378", "-0.5722358", "1.408732", "0.077464275", "0.05909166", "1.7160531", "0.7050679", "1.2111387", "0.2477503", "-1.2611684", "-1.0893083", "-0.6284258", "2.3180728", "0.31847176", "1.5131451", "-2.9998567", "0.031170808", "-0.6854341", "-0.2268493", "-0.04320812", "-1.3659483", "2.2134178", "-1.0260345", "3.5598574", "0.38325292", "1.122048", "-0.6179844", "-2.1034138", "1.6018326", "1.6357653", "0.77501667", "-0.26973122", "-1.3109845", "1.2802044", "-0.13609312", "0.003997991", "-0.7726767", "0.22039346", "-0.41755414", "1.8419708", "0.9633966", "0.89344054", "0.68618155", "0.32935038", "-1.8181704", "0.2964621", "-1.4854243", "-2.7368033", "0.42453545", "0.5145912", "-2.807243", "0.5165303", "-1.0953065", "0.90508133", "1.1224303", "-1.3460865", "-0.4801135", "-0.074722335", "-0.63559794", "-1.3672079", "0.381887", "0.5356924", "0.5354004", "2.3397455", "0.041605625", "0.6290208", "-0.22388202", "1.0678406", "-1.047766", "0.78560585", "0.66741955", "0.13627462", "0.3126765", "-0.8178132", "0.3949607", "0.8317567", "2.3514643", "1.667541", "-0.8806929", "1.4691226", "1.1970443", "-1.4893599", "-1.3193909", "0.5660795", "0.24182497", "1.1998551", "0.7915248", "0.42410296", "-0.30221334", "-0.5611636", "-0.088866524", "0.016107874", "0.34377256", "-0.42159972", "-1.0274407", "0.21881816", "0.88274586", "0.97441447", "-0.33527645", "-0.34554505", "-1.2974918", "0.82363635", "-0.016729938", "-0.7112498", "0.07435252", "0.640202", "0.13747896", "-0.5928838", "-1.941103", "0.61023104", "-0.58942413", "0.060863674", "0.6874332", "1.0078973", "-0.16551004", "0.57653916", "1.1995406", "2.0773351", "-1.7436508", "-2.5088325", "0.6011417", "1.9478521", "0.6584282", "-1.9158577", "0.52725035", "0.7907411", "0.63100773", "1.3790802", "2.316783", "2.2322762", "2.3612165", "0.6716704", "-0.7580273", "0.77606994", "0.25346783", "-2.22612", "-0.26533502", "2.2493737", "2.692701", "0.33330947", "0.42908445", "0.32351792", "-0.27489117", "-0.079121925", "2.5081167", "-2.1949115", "0.6891037", "-1.0982052", "-0.22882718", "2.0141556", "-0.16185357", "-1.7574887", "-1.9377753", "-1.6156247", "-1.4365431", "-1.5023313"]}