{"title": "Capacity-Scaling Algorithm", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Capacity-Scaling Algorithm"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "The"}, {"attributes": {"color": "#47a1b3"}, "insert": " capacity-scaling algorithm"}, {"insert": " is a"}, {"attributes": {"link": "http://127.0.0.1:5000/#822d800b-7ce9-496b-8533-66c684217958"}, "insert": " max flow algorithm"}, {"insert": " with a runtime of"}, {"attributes": {"color": "#98add9"}, "insert": " O(m"}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "^2"}}, {"attributes": {"color": "#98add9"}, "insert": " (1 + log C))"}, {"attributes": {"color": "#edfaff"}, "insert": "."}, {"insert": "\n\nLet's give the algorithm below:\n"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "Capacity-Scaling:"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "  "}, {"attributes": {"color": "#98add9"}, "insert": "C"}, {"insert": " <- maxmimum edge capacity;\n "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "\\Delta"}}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"insert": "<- least power of 2 less than "}, {"attributes": {"color": "#98add9"}, "insert": "C"}, {"insert": ";\n "}, {"attributes": {"color": "#50c75a"}, "insert": "while"}, {"insert": "("}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "\\Delta"}}, {"insert": " "}, {"insert": {"formula": "\\geq"}}, {"insert": "  "}, {"attributes": {"color": "#98add9"}, "insert": "1"}, {"insert": "){\n    "}, {"attributes": {"color": "#50c75a"}, "insert": "while"}, {"insert": "("}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "\\exists"}}, {"attributes": {"color": "#98add9"}, "insert": " s-t"}, {"insert": " path "}, {"attributes": {"color": "#98add9"}, "insert": "P"}, {"insert": " in "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "G_f(\\Delta)"}}, {"insert": " ){\n      "}, {"attributes": {"link": "#c55dfae1-ca34-4e91-a8c1-d926712ab1b4"}, "insert": "Augment"}, {"insert": "("}, {"attributes": {"color": "#98add9"}, "insert": "P"}, {"insert": ");\n      "}, {"attributes": {"color": "#47a1b3"}, "insert": "Update"}, {"insert": "("}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "G_f(\\Delta)"}}, {"insert": "); \n    }\n  "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "\\Delta"}}, {"insert": " <- "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "\\Delta"}}, {"attributes": {"color": "#98add9"}, "insert": " /2"}, {"insert": "\n }\nreturn "}, {"attributes": {"color": "#98add9"}, "insert": "f"}, {"insert": "\n\nWhere "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "G_f(\\Delta)"}}, {"insert": " is the residual graph"}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "G_f"}}, {"insert": " with all edge capacities greater than"}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "\\Delta"}}, {"insert": ".\n\nLet's consider some results of this "}, {"attributes": {"color": "#47a1b3"}, "insert": "algorithm"}, {"insert": ".\n\nThe "}, {"attributes": {"color": "#47a1b3"}, "insert": "key result"}, {"insert": " is that, at the end of each "}, {"attributes": {"color": "#47a1b3"}, "insert": {"formula": "\\Delta"}}, {"attributes": {"color": "#47a1b3"}, "insert": "-scaling cycle"}, {"insert": ", Then"}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "|f*| \\leq |f| + m\\Delta"}}, {"insert": " .\n\nWe prove as follows: At the end of a "}, {"attributes": {"color": "#47a1b3"}, "insert": {"formula": "\\Delta"}}, {"attributes": {"color": "#47a1b3"}, "insert": "-scaling cycle"}, {"insert": ", consider the set of vertices A reachable from s in"}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "G_f(\\Delta)"}}, {"insert": ". Now, in"}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "G_f"}}, {"insert": " , the capacity of each edge (a,b) with "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "a \\in A"}}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"insert": "and"}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "b \\in V \\setminus A"}}, {"attributes": {"color": "#98add9"}, "insert": "  "}, {"insert": "must be less than "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "\\Delta"}}, {"insert": "; were it not then b would be reachable in "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "G_f(\\Delta)"}}, {"insert": " . \n\nHence, the maxmimum capacity of the cut would be at most "}, {"insert": {"formula": "m \\Delta"}}, {"insert": ". And since we may consider (A, V\\A) a cut, by weak duality"}, {"attributes": {"color": "#98add9"}, "insert": " |f*| "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "\\leq"}}, {"attributes": {"color": "#98add9"}, "insert": " Cap(A, V\\A) "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "\\leq"}}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "m\\Delta"}}, {"insert": " . So it follows that "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "|f*| \\leq |f| + m\\Delta"}}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"insert": ".\n\nAs a "}, {"attributes": {"color": "#98add9"}, "insert": "corollary"}, {"insert": ", it follows that the inner loop is executed at most"}, {"attributes": {"color": "#98add9"}, "insert": " m "}, {"insert": "times for any"}, {"attributes": {"color": "#47a1b3"}, "insert": " "}, {"attributes": {"color": "#47a1b3"}, "insert": {"formula": "\\Delta"}}, {"insert": ".\n\n\n"}]}, "text": "Capacity-Scaling Algorithm\n\nThe capacity-scaling algorithm is a max flow algorithm with a runtime of O(m\ufeff\n2\n2\n\ufeff (1 + log C)).\n\n\n\n\nLet's give the algorithm below:\n\n\n\nCapacity-Scaling:\n\n  C <- maxmimum edge capacity;\n\n \ufeff\n\u0394\n\u0394\ufeff <- least power of 2 less than C;\n\n while(\ufeff\n\u0394\n\u0394\ufeff \ufeff\n\u2265\n\u2265\ufeff  1){\n\n    while(\ufeff\n\u2203\n\u2203\ufeff s-t path P in \ufeff\nGf(\u0394)\nG\nf\n\t\u200b\n\n(\u0394)\ufeff ){\n\n      Augment(P);\n\n      Update(\ufeff\nGf(\u0394)\nG\nf\n\t\u200b\n\n(\u0394)\ufeff); \n\n    }\n\n  \ufeff\n\u0394\n\u0394\ufeff <- \ufeff\n\u0394\n\u0394\ufeff /2\n\n }\n\nreturn f\n\n\n\n\nWhere \ufeff\nGf(\u0394)\nG\nf\n\t\u200b\n\n(\u0394)\ufeff is the residual graph \ufeff\nGf\nG\nf\n\t\u200b\n\n\ufeff with all edge capacities greater than \ufeff\n\u0394\n\u0394\ufeff.\n\n\n\n\nLet's consider some results of this algorithm.\n\n\n\n\nThe key result is that, at the end of each \ufeff\n\u0394\n\u0394\ufeff-scaling cycle, Then \ufeff\n\u2223f\u2217\u2223\u2264\u2223f\u2223+m\u0394\n\u2223f\u2217\u2223\u2264\u2223f\u2223+m\u0394\ufeff .\n\n\n\n\nWe prove as follows: At the end of a \ufeff\n\u0394\n\u0394\ufeff-scaling cycle, consider the set of vertices A reachable from s in \ufeff\nGf(\u0394)\nG\nf\n\t\u200b\n\n(\u0394)\ufeff. Now, in \ufeff\nGf\nG\nf\n\t\u200b\n\n\ufeff , the capacity of each edge (a,b) with \ufeff\na\u2208A\na\u2208A\ufeff and \ufeff\nb\u2208V\u2216A\nb\u2208V\u2216A\ufeff  must be less than \ufeff\n\u0394\n\u0394\ufeff; were it not then b would be reachable in \ufeff\nGf(\u0394)\nG\nf\n\t\u200b\n\n(\u0394)\ufeff . \n\n\n\n\nHence, the maxmimum capacity of the cut would be at most \ufeff\nm\u0394\nm\u0394\ufeff. And since we may consider (A, V\\A) a cut, by weak duality |f*| \ufeff\n\u2264\n\u2264\ufeff Cap(A, V\\A) \ufeff\n\u2264\n\u2264\ufeff \ufeff\nm\u0394\nm\u0394\ufeff . So it follows that \ufeff\n\u2223f\u2217\u2223\u2264\u2223f\u2223+m\u0394\n\u2223f\u2217\u2223\u2264\u2223f\u2223+m\u0394\ufeff .\n\n\n\n\nAs a corollary, it follows that the inner loop is executed at most m times for any \ufeff\n\u0394\n\u0394\ufeff.\n\n\n\n\n\n", "updatedAt": 1714749319738, "embeddings": ["-0.680644", "-0.7554048", "0.121571645", "0.14163174", "0.59093446", "-0.042961527", "0.4541991", "-0.12360177", "0.3541937", "-1.6068692", "0.27236855", "0.47773218", "0.23548515", "-0.0743643", "-0.056253493", "-1.1906686", "-2.2826943", "-0.6026919", "0.46718866", "0.25088927", "0.1857933", "1.0898596", "0.2941089", "-1.4170245", "-2.398819", "0.28465596", "-1.1142569", "0.31853577", "-2.1434743", "-1.7324111", "0.26511538", "-1.3930465", "0.42672938", "1.7459506", "0.83441436", "-1.0206003", "1.027333", "1.2014968", "2.1585155", "1.1455791", "-0.7986117", "0.4841558", "-0.2680541", "-1.1165137", "-0.8130809", "-0.050664213", "0.45371103", "1.9337391", "-0.8602876", "1.5376446", "0.59227675", "0.24945864", "0.92180276", "-0.49907732", "-0.6158927", "-1.5618384", "1.8681527", "0.6394548", "0.6170893", "0.19017164", "-1.277419", "-0.670761", "-0.8964128", "0.97546273", "-0.030851036", "0.8407067", "2.169685", "2.4215794", "0.36291894", "2.5870001", "-0.9960701", "-0.8624729", "0.9321983", "0.7215377", "0.77576035", "-1.9069592", "0.26808065", "0.51355666", "1.2068661", "0.5102987", "-0.29450822", "-1.0055254", "-3.0053864", "-0.5157765", "0.66041553", "0.756093", "0.73245436", "1.3659066", "-0.1313457", "0.12926115", "2.1703837", "-1.2032666", "0.8610366", "1.1639057", "0.3436221", "-1.1255263", "-0.35426667", "-0.6012887", "1.3255248", "-0.14522098", "-1.9083984", "-1.3688288", "0.4036054", "1.2278858", "-2.1613011", "1.0433851", "-0.7757104", "-0.65695405", "-0.77062094", "0.39676967", "-2.8133225", "-1.2719374", "-1.1158253", "2.6293697", "1.9056681", "-0.09000668", "-1.2192879", "-0.026024686", "0.54681915", "0.5234203", "1.0635659", "1.7215215", "0.7858765", "-0.18451634", "-0.82267076", "-2.5245981", "-2.4060328", "-0.8928067", "1.2757097", "1.184349", "-1.1860781", "1.1409674", "0.984731", "0.7136123", "-0.9532396", "1.0737909", "-0.5306066", "0.9370797", "-1.3256339", "0.08482054", "0.09292222", "-1.2955006", "-2.2327764", "0.7732844", "-1.3527986", "0.43642148", "-0.44612226", "0.80215234", "-0.39091945", "0.8395118", "0.49692264", "-0.4040135", "-1.0059586", "-2.2939787", "0.18230648", "1.273459", "-0.13681775", "1.2111812", "-1.8118035", "0.89073884", "-2.0433838", "-0.15902509", "-0.021164725", "-0.66479564", "0.9047227", "-0.24197283", "0.8708806", "-2.529034", "-1.7096363", "1.0829554", "0.3539675", "-0.6138399", "0.48994514", "1.4280124", "2.1038442", "-0.5788272", "-1.0672828", "0.13427033", "1.02595", "-0.97087634", "1.4476815", "-0.55062973", "-0.16151048", "-0.45261434", "0.5709053", "-2.6285625", "-0.46043354", "-1.5061406", "0.7924702", "-1.8637974", "-0.43308076", "0.16984278", "0.10147457", "-2.1150627", "-1.5840272", "0.47202057", "-0.28563923", "-1.1035306", "-2.717832", "0.6060728"]}