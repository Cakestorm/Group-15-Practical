{"title": "Red-Black Trees", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Red-"}, {"attributes": {"color": "#50c75a", "underline": true}, "insert": "Black"}, {"attributes": {"color": "#47a1b3", "underline": true}, "insert": " Trees"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "A "}, {"attributes": {"color": "#47a1b3"}, "insert": "red"}, {"insert": "-"}, {"attributes": {"color": "#50c75a"}, "insert": "black "}, {"attributes": {"link": "#Trees"}, "insert": "tree"}, {"insert": " is a "}, {"attributes": {"link": "#Binary_Search_Trees"}, "insert": "binary search tree"}, {"insert": " which obeys the "}, {"attributes": {"color": "#47a1b3"}, "insert": "red"}, {"insert": "-"}, {"attributes": {"color": "#50c75a"}, "insert": "black "}, {"insert": "properties:\n\nEvery node is either "}, {"attributes": {"color": "#47a1b3"}, "insert": "red "}, {"insert": "or "}, {"attributes": {"color": "#50c75a"}, "insert": "black"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "The root of the tree is "}, {"attributes": {"color": "#47a1b3"}, "insert": "black"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Every leaf node ("}, {"attributes": {"color": "#98add9"}, "insert": "NIL"}, {"insert": ") is "}, {"attributes": {"color": "#47a1b3"}, "insert": "black"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "If a node is "}, {"attributes": {"color": "#50c75a"}, "insert": "red"}, {"insert": ", then each of its children are "}, {"attributes": {"color": "#47a1b3"}, "insert": "black"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "For each node "}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": ", all"}, {"attributes": {"color": "#98add9"}, "insert": " simple paths"}, {"insert": " from "}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": " to a leaf contain the same number of "}, {"attributes": {"color": "#47a1b3"}, "insert": "black "}, {"insert": "nodes."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "\nWhy should we care about obeying these rules? Well, in doing so, we ensure the set of operations on "}, {"attributes": {"link": "#Binary_Search_Trees"}, "insert": "binary search trees"}, {"insert": " takes "}, {"attributes": {"color": "#98add9"}, "insert": "O(log n) "}, {"insert": "time, as opposed to "}, {"attributes": {"color": "#98add9"}, "insert": "O(n) "}, {"insert": "in a standard "}, {"attributes": {"link": "#Binary_Search_Trees"}, "insert": "BST"}, {"insert": ".\n"}]}, "text": "Red-Black Trees\n\nA red-black tree is a binary search tree which obeys the red-black properties:\n\n\n\n\nEvery node is either red or black.\nThe root of the tree is black.\nEvery leaf node (NIL) is black.\nIf a node is red, then each of its children are black.\nFor each node x, all simple paths from x to a leaf contain the same number of black nodes.\n\n\n\n\nWhy should we care about obeying these rules? Well, in doing so, we ensure the set of operations on binary search trees takes O(log n) time, as opposed to O(n) in a standard BST.", "updatedAt": 1714595480877}