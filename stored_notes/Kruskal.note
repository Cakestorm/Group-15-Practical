{"title": "Kruskal's algorithm", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Kruskal's algorithm"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "Not actually very relevant to the "}, {"attributes": {"link": "#Algorithms_and_Data_Structures"}, "insert": "ADS"}, {"insert": " course; it's more of a "}, {"attributes": {"color": "#50c75a"}, "insert": "DAA "}, {"insert": "thing. All you need to know is that it finds a "}, {"attributes": {"link": "#MST"}, "insert": "minimum spanning tree"}, {"insert": " on a graph by considering the set of edges, and that it tends to be implemented with "}, {"attributes": {"link": "#Disjoint_Sets"}, "insert": "disjoint sets"}, {"insert": ".\n"}]}, "text": "Kruskal's algorithm\n\nNot actually very relevant to the ADS course; it's more of a DAA thing. All you need to know is that it finds a minimum spanning tree on a graph by considering the set of edges, and that it tends to be implemented with disjoint sets.", "updatedAt": 1714597698718, "embeddings": ["0.21348147", "-0.21726763", "0.80633396", "0.44254518", "1.1297244", "-0.36319906", "0.7051608", "-0.57703066", "-0.98070025", "-0.8178103", "0.42119673", "-0.96987355", "1.6459624", "0.50203615", "-0.07915921", "1.0880594", "-0.80006945", "-1.1867423", "0.08330049", "0.5298369", "0.5721202", "-0.7478747", "1.0117043", "-1.3783281", "-0.16192667", "-0.63538396", "-0.7597857", "-0.08134328", "-0.9383997", "-1.1388897", "-0.009593143", "-0.01880116", "-0.4279243", "1.5943896", "0.06422625", "-0.84672755", "-0.29449862", "-0.0338721", "0.4571965", "0.5856947", "-0.84036416", "0.03215503", "0.31272563", "-1.4672201", "-0.6115218", "1.1402266", "-0.54248595", "0.47224897", "-0.015346742", "0.67552125", "-0.176882", "-0.73682517", "0.8742392", "-0.050471462", "-0.8772048", "0.54664475", "1.2709757", "-0.17813697", "0.002161644", "0.6627477", "0.027163228", "-0.17696013", "-0.24842232", "0.5396077", "-0.8223858", "0.636678", "0.48189887", "-0.06113461", "-0.0012493434", "-0.62714475", "-0.4757677", "-0.25255758", "0.9446893", "0.24329837", "-0.13202262", "-0.06820519", "-0.12097844", "1.1366543", "0.3758371", "-0.029352546", "-0.95584834", "-0.33467978", "-1.0189793", "0.8912389", "0.16045281", "0.9488859", "0.6056923", "-1.1428646", "-0.19483036", "-0.62058216", "0.71666914", "-0.17110465", "1.575882", "-0.24852683", "0.15933812", "0.03726802", "-1.7470474", "0.49782914", "-0.21458077", "0.5944276", "-0.40252587", "-0.14332041", "-0.29290646", "0.2137615", "-0.53435975", "-0.25487345", "0.110462874", "0.8258902", "0.0045984974", "0.087164745", "0.20274355", "-0.18362126", "-0.24900563", "0.575847", "0.10183725", "0.01226958", "-0.40757498", "-0.47869304", "0.061334334", "-0.0859513", "1.2041756", "0.93468964", "-1.0768842", "0.7413916", "-0.23227426", "-0.29568407", "-0.9293013", "-0.9244436", "0.04326819", "0.3092035", "-0.09786516", "0.64292216", "0.634941", "0.26709923", "0.23729856", "1.2652365", "-0.088281706", "0.46377692", "-0.9553772", "0.40155983", "-0.22360915", "0.028744927", "-1.4745177", "0.33651912", "0.4014533", "1.2468439", "-0.1316936", "0.07616771", "0.20599589", "0.1843594", "-0.49534512", "-0.25304258", "-0.39935082", "-1.4663757", "1.0019826", "0.52133715", "-0.23635459", "0.40802664", "0.7945224", "0.77282274", "0.6224449", "0.6819875", "0.010071085", "-0.87352777", "0.9503097", "0.73845917", "-0.10148077", "0.1842893", "-0.21657717", "0.3392765", "0.8656831", "0.09820324", "1.0006024", "0.51954055", "0.18369527", "0.7046128", "-0.58614916", "0.53213006", "0.5291258", "-0.43061602", "0.5336341", "1.3175802", "0.024405107", "0.08659454", "0.40237808", "0.30055112", "0.30508754", "-0.6028454", "0.40131313", "0.20564407", "0.31325653", "-0.0184041", "-0.63412833", "-0.67370385", "-1.3004681", "0.71384513", "0.117979385", "-0.6585286", "0.405188", "1.4303808"]}