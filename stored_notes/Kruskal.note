{"title": "Kruskal's algorithm", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Kruskal's algorithm"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "Not actually very relevant to the "}, {"attributes": {"link": "#Algorithms_and_Data_Structures"}, "insert": "ADS"}, {"insert": " course; it's more of a "}, {"attributes": {"color": "#50c75a"}, "insert": "DAA "}, {"insert": "thing. All you need to know is that it finds a "}, {"attributes": {"link": "#MST"}, "insert": "minimum spanning tree"}, {"insert": " on a graph by considering the set of edges, and that it tends to be implemented with "}, {"attributes": {"link": "#Disjoint_Sets"}, "insert": "disjoint sets"}, {"insert": ".\n"}]}, "text": "Kruskal's algorithm\n\nNot actually very relevant to the ADS course; it's more of a DAA thing. All you need to know is that it finds a minimum spanning tree on a graph by considering the set of edges, and that it tends to be implemented with disjoint sets.", "updatedAt": 1714597698718, "embeddings": ["0.08076666", "-0.18009597", "0.49185956", "0.4390019", "1.3278655", "-0.46867642", "0.70167905", "-0.61511505", "-0.87862587", "-0.8356048", "0.5253401", "-0.77687407", "1.5005412", "0.48478374", "0.06928163", "1.2548976", "-0.6162078", "-1.0981028", "0.3093225", "0.39324835", "0.5463337", "-0.7485449", "1.1010793", "-1.4086465", "-0.43247423", "-0.33702675", "-0.6178478", "0.24862991", "-0.73140645", "-1.2532964", "-0.13693106", "0.061026786", "-0.57404846", "1.9298303", "-0.09260842", "-0.8265371", "-0.4670538", "0.10594743", "0.39615223", "0.43939745", "-0.6535233", "-0.13618082", "0.28376466", "-1.2684762", "-0.39951155", "1.2369766", "-0.7771718", "0.5395015", "0.031703852", "0.73400253", "-0.010748244", "-0.6601127", "0.68531", "-0.046985786", "-0.8254365", "0.35843247", "1.3056408", "-0.26263872", "-0.003162739", "0.51702845", "0.093912296", "-0.06236184", "-0.24558695", "0.57604164", "-0.713625", "0.6118087", "0.6481427", "-0.11066318", "0.1085739", "-0.72806567", "-0.43186352", "-0.19841488", "0.6015704", "0.34026414", "-0.16152488", "-0.13852188", "-0.29030946", "1.0293535", "0.5316521", "0.036205262", "-0.9780289", "-0.22971725", "-1.0289059", "0.92301846", "0.3758189", "0.819038", "0.33131665", "-0.96364725", "-0.090024605", "-0.66050076", "0.7418345", "-0.26601815", "1.5122151", "-0.20081973", "0.23229447", "-0.09029712", "-1.8015114", "0.5847795", "-0.39169008", "0.95789254", "-0.6669715", "0.0068552885", "-0.18202074", "0.19188067", "-0.34975046", "0.03156008", "0.046612192", "0.56617534", "0.055261165", "0.0021181195", "0.17904438", "-0.05690602", "-0.359547", "0.49694744", "0.0860769", "0.16675246", "-0.43045467", "-0.33228874", "-0.13567448", "0.117000796", "0.8979183", "1.2331806", "-1.0893824", "0.76504403", "-0.35478833", "-0.17598216", "-0.877836", "-1.1038847", "0.17974712", "0.194166", "-0.03361121", "0.53617615", "0.5666886", "0.16081508", "-0.14353512", "1.5143138", "0.07070306", "0.6421212", "-0.8245802", "0.30010664", "0.06641469", "-0.017839674", "-1.4739227", "0.1837615", "0.41268116", "1.079165", "-0.5051872", "-0.019066326", "0.015926136", "0.10167727", "-0.6869624", "-0.44781876", "-0.3873117", "-1.379863", "0.79622114", "0.66578645", "-0.15000786", "0.4262786", "1.071435", "0.5955122", "0.62844926", "0.5362461", "0.2167466", "-0.80946696", "0.81064105", "0.655283", "-0.3720468", "0.20665237", "-0.26047438", "0.23111175", "0.8380445", "0.33038238", "1.003634", "0.6618633", "0.23198621", "0.687923", "-0.668865", "0.75716674", "0.741658", "-0.38346922", "0.37778458", "1.2330374", "0.28341085", "0.21409461", "0.32580563", "0.38472018", "0.42787367", "-0.7181035", "0.2822044", "0.17067423", "0.25386328", "0.045869924", "-0.65126777", "-0.6769212", "-1.1234899", "0.69512975", "0.27430472", "-0.91199905", "0.27353543", "1.7597663"]}