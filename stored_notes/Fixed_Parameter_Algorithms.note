{"title": "Fixed Parameter Algorithms", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Fixed Parameter Algorithms"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "When considering "}, {"attributes": {"link": "#NP_Completeness"}, "insert": "NP-Complete"}, {"insert": " problems, even if we don't have a"}, {"attributes": {"color": "#50c75a"}, "insert": " polynomial-time"}, {"insert": " algorithm, we still care about the "}, {"attributes": {"color": "#98add9"}, "insert": "time complexity"}, {"insert": " of our "}, {"attributes": {"color": "#50c75a"}, "insert": "exponential "}, {"insert": "algorithms. For instance, "}, {"attributes": {"color": "#98add9"}, "insert": "O(2^k)"}, {"insert": " is far better than "}, {"attributes": {"color": "#98add9"}, "insert": "O(n^k)"}, {"insert": " for large n.\n\nIn particular, we want a "}, {"attributes": {"color": "#50c75a"}, "insert": "parametrisation "}, {"insert": "of a problem - a computable function which maps a problem instance "}, {"attributes": {"color": "#98add9"}, "insert": "<I> "}, {"insert": "to an integer "}, {"attributes": {"color": "#98add9"}, "insert": "k"}, {"insert": ". If "}, {"attributes": {"color": "#98add9"}, "insert": "k"}, {"insert": " is "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": ", the overall runtime of the algorithm is "}, {"attributes": {"color": "#98add9"}, "insert": "polynomial"}, {"insert": ".\n\nTo get a "}, {"attributes": {"color": "#47a1b3"}, "insert": "fixed-parameter algorithm"}, {"insert": ", we use the following techniques:\n\n"}, {"attributes": {"link": "#Bounded_Search_Trees"}, "insert": "Bounded-search trees"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"attributes": {"link": "#Kernelisation"}, "insert": "Kernelisation"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"attributes": {"link": "#Colour_Coding"}, "insert": "Colour-coding"}, {"attributes": {"list": "bullet"}, "insert": "\n"}]}, "text": "Fixed Parameter Algorithms\n\nWhen considering NP-Complete problems, even if we don't have a polynomial-time algorithm, we still care about the time complexity of our exponential algorithms. For instance, O(2^k) is far better than O(n^k) for large n.\n\n\n\n\nIn particular, we want a parametrisation of a problem - a computable function which maps a problem instance <I> to an integer k. If k is O(1), the overall runtime of the algorithm is polynomial.\n\n\n\n\nTo get a fixed-parameter algorithm, we use the following techniques:\n\n\n\n\nBounded-search trees\nKernelisation\nColour-coding", "updatedAt": 1714593367896}