{"title": "Fixed Parameter Algorithms", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Fixed Parameter Algorithms"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "When considering "}, {"attributes": {"link": "#NP_Completeness"}, "insert": "NP-Complete"}, {"insert": " problems, even if we don't have a"}, {"attributes": {"color": "#50c75a"}, "insert": " polynomial-time"}, {"insert": " algorithm, we still care about the "}, {"attributes": {"color": "#98add9"}, "insert": "time complexity"}, {"insert": " of our "}, {"attributes": {"color": "#50c75a"}, "insert": "exponential "}, {"insert": "algorithms. For instance, "}, {"attributes": {"color": "#98add9"}, "insert": "O(2^k)"}, {"insert": " is far better than "}, {"attributes": {"color": "#98add9"}, "insert": "O(n^k)"}, {"insert": " for large n.\n\nIn particular, we want a "}, {"attributes": {"color": "#50c75a"}, "insert": "parametrisation "}, {"insert": "of a problem - a computable function which maps a problem instance "}, {"attributes": {"color": "#98add9"}, "insert": "<I> "}, {"insert": "to an integer "}, {"attributes": {"color": "#98add9"}, "insert": "k"}, {"insert": ". If "}, {"attributes": {"color": "#98add9"}, "insert": "k"}, {"insert": " is "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": ", the overall runtime of the algorithm is "}, {"attributes": {"color": "#98add9"}, "insert": "polynomial"}, {"insert": ".\n\nTo get a "}, {"attributes": {"color": "#47a1b3"}, "insert": "fixed-parameter algorithm"}, {"insert": ", we use the following techniques:\n\n"}, {"attributes": {"link": "#Bounded_Search_Trees"}, "insert": "Bounded-search trees"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"attributes": {"link": "#Kernelisation"}, "insert": "Kernelisation"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"attributes": {"link": "#Colour_Coding"}, "insert": "Colour-coding"}, {"attributes": {"list": "bullet"}, "insert": "\n"}]}, "text": "Fixed Parameter Algorithms\n\nWhen considering NP-Complete problems, even if we don't have a polynomial-time algorithm, we still care about the time complexity of our exponential algorithms. For instance, O(2^k) is far better than O(n^k) for large n.\n\n\n\n\nIn particular, we want a parametrisation of a problem - a computable function which maps a problem instance <I> to an integer k. If k is O(1), the overall runtime of the algorithm is polynomial.\n\n\n\n\nTo get a fixed-parameter algorithm, we use the following techniques:\n\n\n\n\nBounded-search trees\nKernelisation\nColour-coding", "updatedAt": 1714593367896, "embeddings": ["-0.53104967", "0.028295988", "-0.55044883", "1.5732714", "-0.327954", "-0.4543389", "0.9138808", "1.5431609", "-0.39074618", "0.5005399", "0.4392476", "0.59140724", "0.18389712", "-1.0431275", "0.5830066", "-0.019906498", "0.5274416", "-0.9436589", "0.42267263", "1.0129733", "0.5072021", "-0.62254155", "0.9776526", "-1.7359874", "-0.6511065", "-1.9746479", "-0.6054313", "0.3601196", "-0.13069727", "0.118889645", "-1.1797929", "0.97709006", "0.0051142657", "-0.024086364", "-2.0420835", "-1.2046733", "1.114923", "-0.96830136", "-1.3304251", "0.13416807", "-0.8566612", "-0.13459404", "-1.4855398", "-0.9958905", "1.6054515", "0.49961767", "-1.2229202", "-0.0054622954", "-1.4123639", "0.5440277", "-0.6772936", "0.33771423", "1.3526785", "-0.7053848", "0.12216087", "-0.27421245", "1.3411525", "-0.19823353", "0.5120247", "0.42598078", "-0.054184712", "-0.530673", "-0.15204573", "0.21264608", "-0.02601083", "1.7025698", "-0.21186571", "-0.40998474", "-1.2210511", "-0.0014105804", "-0.6921236", "-0.8100451", "0.17115802", "-0.17112654", "1.5075911", "-0.03487695", "0.38653803", "0.7602423", "-0.23927283", "-0.6133272", "-1.3116921", "0.026772551", "-0.14734979", "0.79707927", "-0.40812954", "-1.1033975", "-0.54628366", "-0.89988166", "-1.2504172", "-1.0232848", "0.2522334", "-0.98101383", "0.77290595", "-0.3399815", "-0.10626406", "-1.2343527", "-0.74102324", "1.6579902", "-0.2728146", "-0.21701752", "0.5952344", "-1.2219205", "0.65340775", "-0.6826915", "-1.4296654", "-1.3180614", "0.43552735", "-0.3062167", "0.46157345", "0.44106564", "-0.54629856", "0.3470917", "-0.5789553", "0.2990985", "1.5781312", "-0.7049973", "0.7352836", "-0.53588915", "-0.55408585", "-0.34644833", "0.6653581", "1.6054231", "-0.27394685", "0.10063523", "-1.0007225", "-0.5111939", "-0.85079986", "0.13257258", "2.0042517", "1.2701975", "-0.4599692", "1.5179187", "-0.30912423", "0.77100337", "0.6470017", "0.25756165", "0.49941", "0.74420553", "-0.6751478", "-1.1233653", "-0.41161928", "0.024412192", "-0.91001326", "-0.18766181", "0.20246652", "0.72075474", "-1.1335778", "1.1018739", "-0.26310286", "-0.4617245", "-1.2340826", "-1.479154", "0.4938823", "-0.36753166", "0.16283269", "-0.12995046", "-1.0083807", "-0.14647321", "0.89347786", "0.8838383", "0.44621196", "1.1151232", "1.0112139", "-0.651041", "-1.2653804", "0.01103144", "0.94911486", "-0.5004098", "0.11245359", "1.0979007", "0.041419048", "0.031010408", "1.9807405", "0.21144801", "1.2781221", "-0.38434815", "0.97651666", "0.3293672", "0.2548914", "-0.2564632", "0.7928464", "-0.12204552", "-0.93267673", "0.3779504", "-0.5944504", "-0.06447212", "-0.9949046", "0.6108569", "1.6217717", "0.95399594", "1.0088997", "-0.6522295", "0.08088032", "0.189169", "-1.4123865", "0.053847373", "0.53226167", "0.26266408", "0.5424573", "-0.83610123"]}