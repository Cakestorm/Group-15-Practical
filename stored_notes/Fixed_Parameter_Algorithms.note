{"title": "Fixed Parameter Algorithms", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Fixed Parameter Algorithms"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "When considering "}, {"attributes": {"link": "#NP_Completeness"}, "insert": "NP-Complete"}, {"insert": " problems, even if we don't have a"}, {"attributes": {"color": "#50c75a"}, "insert": " polynomial-time"}, {"insert": " algorithm, we still care about the "}, {"attributes": {"color": "#98add9"}, "insert": "time complexity"}, {"insert": " of our "}, {"attributes": {"color": "#50c75a"}, "insert": "exponential "}, {"insert": "algorithms. For instance, "}, {"attributes": {"color": "#98add9"}, "insert": "O(2^k)"}, {"insert": " is far better than "}, {"attributes": {"color": "#98add9"}, "insert": "O(n^k)"}, {"insert": " for large n.\n\nIn particular, we want a "}, {"attributes": {"color": "#50c75a"}, "insert": "parametrisation "}, {"insert": "of a problem - a computable function which maps a problem instance "}, {"attributes": {"color": "#98add9"}, "insert": "<I> "}, {"insert": "to an integer "}, {"attributes": {"color": "#98add9"}, "insert": "k"}, {"insert": ". If "}, {"attributes": {"color": "#98add9"}, "insert": "k"}, {"insert": " is "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": ", the overall runtime of the algorithm is "}, {"attributes": {"color": "#98add9"}, "insert": "polynomial"}, {"insert": ".\n\nTo get a "}, {"attributes": {"color": "#47a1b3"}, "insert": "fixed-parameter algorithm"}, {"insert": ", we use the following techniques:\n\n"}, {"attributes": {"link": "#Bounded_Search_Trees"}, "insert": "Bounded-search trees"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"attributes": {"link": "#Kernelisation"}, "insert": "Kernelisation"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"attributes": {"link": "#Colour_Coding"}, "insert": "Colour-coding"}, {"attributes": {"list": "bullet"}, "insert": "\n"}]}, "text": "Fixed Parameter Algorithms\n\nWhen considering NP-Complete problems, even if we don't have a polynomial-time algorithm, we still care about the time complexity of our exponential algorithms. For instance, O(2^k) is far better than O(n^k) for large n.\n\n\n\n\nIn particular, we want a parametrisation of a problem - a computable function which maps a problem instance <I> to an integer k. If k is O(1), the overall runtime of the algorithm is polynomial.\n\n\n\n\nTo get a fixed-parameter algorithm, we use the following techniques:\n\n\n\n\nBounded-search trees\nKernelisation\nColour-coding", "updatedAt": 1714593367896, "embeddings": ["-0.46366403", "0.03288819", "-0.52351695", "1.4496375", "-0.47792247", "-0.5741724", "0.7118974", "1.4416416", "-0.48934972", "0.56771576", "0.24295326", "0.8646149", "0.27866077", "-1.0466529", "0.673455", "0.008106045", "0.44358507", "-0.76325864", "0.27921262", "0.80358624", "0.24267253", "-0.7098032", "0.9813036", "-1.6462651", "-0.8412987", "-1.8215485", "-0.4538769", "0.1714118", "-0.121396214", "0.0941189", "-1.443952", "0.6817986", "-0.030684918", "-0.07194262", "-2.1374586", "-1.4209934", "0.97700596", "-1.0290788", "-1.1037859", "0.23509233", "-0.71949136", "-0.16312349", "-1.2857832", "-1.0267763", "1.6369324", "0.5156858", "-1.2851877", "0.19135118", "-1.2579819", "0.49773157", "-0.68372107", "0.45912358", "1.5932089", "-0.9094205", "0.023129683", "-0.342679", "1.3172411", "0.047072288", "0.44534013", "0.49069896", "0.0821458", "-0.5275319", "-0.15805945", "0.013219511", "0.06845062", "1.6918026", "-0.40026888", "-0.78569955", "-1.2408959", "-0.35055244", "-0.65711963", "-0.72855127", "0.5156599", "-0.09422214", "1.5393448", "0.037027743", "0.5316059", "0.53014624", "-0.08384194", "-0.56553143", "-1.4790943", "-0.30993184", "0.02112299", "0.61505264", "-0.33682746", "-1.0035882", "-0.60087645", "-1.0210153", "-1.4650614", "-1.114153", "0.29299256", "-1.0600713", "0.6606367", "-0.34299973", "0.118487105", "-0.9770719", "-0.5925949", "1.3623588", "-0.3674425", "-0.23215541", "0.847265", "-1.2406512", "0.70036113", "-0.6619336", "-1.3644652", "-1.371129", "0.4033322", "0.03337666", "0.4204415", "0.50692016", "-0.37860444", "0.34160328", "-0.9476566", "0.14364827", "1.3453418", "-0.47769904", "0.7592246", "-0.39773002", "-0.18441212", "-0.27590495", "0.5518097", "1.4907897", "-0.30285582", "-0.029286562", "-0.91325605", "-0.3709805", "-1.0211781", "0.40680173", "2.0226483", "1.1710681", "-0.40677795", "1.7417821", "-0.2605371", "0.8214493", "0.5016457", "0.24526748", "0.5633868", "0.86196905", "-0.73193246", "-1.2912062", "-0.43100646", "-0.04351819", "-0.94391817", "-0.33203784", "0.38096246", "0.89353675", "-1.1475188", "0.93640924", "0.053143863", "-0.24417053", "-1.0855669", "-1.2225728", "0.39834422", "-0.3091187", "0.1943039", "-0.066023655", "-1.094657", "-0.019970758", "0.8443078", "0.8443817", "0.42867178", "1.4910119", "0.8525527", "-0.80545795", "-1.0559846", "0.05033176", "1.0234911", "-0.42902187", "0.04849853", "1.2731001", "0.045747977", "0.10216408", "2.103564", "0.30878836", "1.4237436", "-0.4162273", "0.8139993", "0.3876938", "0.020215414", "-0.15495636", "1.0928581", "0.17105933", "-1.1733892", "0.5155755", "-0.859672", "0.022797262", "-0.99667823", "0.42391768", "1.6669769", "1.0820289", "1.0853283", "-0.43036044", "-0.0010440139", "0.23082674", "-1.1932427", "0.1402588", "0.54034406", "0.46180242", "0.49689576", "-0.949111"]}