{"title": "Array Implementation for Disjoint Sets", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Array Implementation for Disjoint Sets"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "A basic way of maintaining a "}, {"attributes": {"link": "#Disjoint_Sets"}, "insert": "disjoint-set datastructure"}, {"insert": ". \n\nSuppose the elements we are storing are in the range "}, {"attributes": {"color": "#98add9"}, "insert": "[1..n]"}, {"insert": ". We maintain an array "}, {"attributes": {"color": "#98add9"}, "insert": "R"}, {"insert": " of "}, {"attributes": {"color": "#50c75a"}, "insert": "representatives"}, {"insert": ", where "}, {"attributes": {"color": "#98add9"}, "insert": "R[i]"}, {"insert": " is the "}, {"attributes": {"color": "#50c75a"}, "insert": "representative "}, {"insert": "of i, and define the operations on the datastructure as:\n\nMake-Set("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": "): Set "}, {"attributes": {"color": "#98add9"}, "insert": "R[x] = x"}, {"insert": ". This is "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Find-Set("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": "): Return the value of "}, {"attributes": {"color": "#98add9"}, "insert": "R[x]"}, {"insert": ". This is "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Union("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "y"}, {"insert": "): For each element "}, {"attributes": {"color": "#98add9"}, "insert": "i"}, {"insert": " of "}, {"attributes": {"color": "#98add9"}, "insert": "R"}, {"insert": ", if "}, {"attributes": {"color": "#98add9"}, "insert": "R[i] = x"}, {"insert": ", then set "}, {"attributes": {"color": "#98add9"}, "insert": "R[i] = y"}, {"insert": ". This is "}, {"attributes": {"color": "#47a1b3"}, "insert": "O(n)"}, {"insert": " "}, {"attributes": {"color": "#50c75a"}, "insert": "(!!)"}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "\nWe are not a fan of the "}, {"attributes": {"color": "#98add9"}, "insert": "O(n)"}, {"insert": " Union("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "y"}, {"insert": ") operation. We can do better. In particular, we might want to consider:\n\n"}, {"attributes": {"link": "#Linked_List_Implementation"}, "insert": "Linked list implementations"}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Disjoint Forests"}, {"attributes": {"list": "ordered"}, "insert": "\n"}]}, "text": "Array Implementation for Disjoint Sets\n\nA basic way of maintaining a disjoint-set datastructure. \n\n\n\n\nSuppose the elements we are storing are in the range [1..n]. We maintain an array R of representatives, where R[i] is the representative of i, and define the operations on the datastructure as:\n\n\n\n\nMake-Set(x): Set R[x] = x. This is O(1).\nFind-Set(x): Return the value of R[x]. This is O(1).\nUnion(x,y): For each element i of R, if R[i] = x, then set R[i] = y. This is O(n) (!!)\n\n\n\n\nWe are not a fan of the O(n) Union(x,y) operation. We can do better. In particular, we might want to consider:\n\n\n\n\nLinked list implementations\nDisjoint Forests", "updatedAt": 1714599688095, "embeddings": ["1.0835071", "-0.79269516", "0.12936333", "-0.20192257", "-0.49929053", "-0.24106295", "0.3895906", "1.246673", "0.6714464", "-1.1190834", "-0.2013018", "-0.8542704", "0.42034262", "0.12406957", "-1.0490682", "0.6029172", "1.6195822", "-0.23204288", "0.18820684", "0.38289216", "0.5914782", "-0.071935594", "0.33882043", "0.55204695", "-1.5187473", "1.5875291", "0.27001745", "0.6302732", "1.1256646", "-1.1226361", "1.2389799", "0.4107471", "0.30302072", "-0.3148068", "-0.605067", "-0.908673", "-0.7359691", "0.52347845", "-0.8071823", "0.61694676", "-0.8068553", "0.78905064", "-0.62972355", "-0.6620579", "0.75731456", "-1.1642826", "0.33817884", "-1.289293", "-0.32594228", "-0.677113", "-0.55595386", "-0.4665978", "1.0740104", "-1.3050777", "-0.62301004", "-0.5903665", "0.029839417", "-0.27007538", "-0.8905817", "0.40460178", "0.91292584", "-0.20742486", "0.7699368", "-0.76204413", "0.74757004", "0.11145956", "0.3112739", "1.5706028", "-0.72417194", "0.18828353", "-0.4964034", "-1.0593956", "0.02601229", "0.49773124", "0.21748824", "0.5461862", "-0.41115052", "-1.750834", "0.96059954", "-0.07797511", "-0.114404164", "0.015585943", "-1.1056545", "0.6254213", "-1.1688355", "0.10543006", "-0.4485828", "0.55848324", "-0.05623568", "0.48186195", "1.2235609", "0.60068405", "0.8990574", "0.9325866", "-0.04439146", "0.027931793", "0.51924974", "0.6179906", "-0.35111725", "0.8227308", "-0.3059217", "0.61832595", "-0.072130695", "-0.06894982", "0.5412533", "-0.52568233", "1.0258913", "-0.9092886", "0.45797327", "-1.1332179", "0.65741885", "-1.4190487", "-0.3152753", "0.07591711", "-0.8358017", "-0.6876464", "-0.789422", "-1.9278833", "0.25086173", "0.016830992", "-0.8989583", "0.6350527", "0.46565038", "0.1347447", "0.7973092", "1.1380216", "0.36448756", "-0.26282153", "-0.74390066", "-0.18431407", "0.094516866", "0.39373592", "0.6993334", "1.2566414", "0.89972764", "1.785489", "-0.18826953", "-0.47186154", "1.5467616", "0.005048", "1.2202368", "-0.6334995", "-0.83538705", "-0.779304", "-1.8550208", "-0.4551683", "-0.91294676", "0.45282906", "-0.24027713", "-0.34533447", "1.3117198", "-0.040250216", "-0.66324604", "-0.9129447", "-0.55914396", "0.06272098", "0.5113739", "0.11166989", "-0.5178652", "-0.05180885", "-0.12481412", "-0.787774", "0.009412749", "0.03344311", "0.018007815", "1.6589415", "-0.4011955", "-0.33078778", "0.550821", "-0.36915043", "0.3247869", "1.3257895", "-0.17992134", "-0.03260619", "1.1382815", "-0.008072398", "0.09564886", "-0.02757775", "0.102415346", "0.9969691", "-0.16358139", "0.98815906", "-0.09051824", "0.12490019", "0.0752717", "0.09446047", "-0.3285025", "0.5962062", "1.7888539", "1.0089244", "-0.75754654", "-1.9620259", "-0.72330916", "-1.1941088", "-0.23824063", "0.09602094", "0.7062816", "-2.3147051", "0.1867835", "-0.39146313"]}