{"title": "Array Implementation for Disjoint Sets", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Array Implementation for Disjoint Sets"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "A basic way of maintaining a "}, {"attributes": {"link": "#Disjoint_Sets"}, "insert": "disjoint-set datastructure"}, {"insert": ". \n\nSuppose the elements we are storing are in the range "}, {"attributes": {"color": "#98add9"}, "insert": "[1..n]"}, {"insert": ". We maintain an array "}, {"attributes": {"color": "#98add9"}, "insert": "R"}, {"insert": " of "}, {"attributes": {"color": "#50c75a"}, "insert": "representatives"}, {"insert": ", where "}, {"attributes": {"color": "#98add9"}, "insert": "R[i]"}, {"insert": " is the "}, {"attributes": {"color": "#50c75a"}, "insert": "representative "}, {"insert": "of i, and define the operations on the datastructure as:\n\nMake-Set("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": "): Set "}, {"attributes": {"color": "#98add9"}, "insert": "R[x] = x"}, {"insert": ". This is "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Find-Set("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": "): Return the value of "}, {"attributes": {"color": "#98add9"}, "insert": "R[x]"}, {"insert": ". This is "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Union("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "y"}, {"insert": "): For each element "}, {"attributes": {"color": "#98add9"}, "insert": "i"}, {"insert": " of "}, {"attributes": {"color": "#98add9"}, "insert": "R"}, {"insert": ", if "}, {"attributes": {"color": "#98add9"}, "insert": "R[i] = x"}, {"insert": ", then set "}, {"attributes": {"color": "#98add9"}, "insert": "R[i] = y"}, {"insert": ". This is "}, {"attributes": {"color": "#47a1b3"}, "insert": "O(n)"}, {"insert": " "}, {"attributes": {"color": "#50c75a"}, "insert": "(!!)"}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "\nWe are not a fan of the "}, {"attributes": {"color": "#98add9"}, "insert": "O(n)"}, {"insert": " Union("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "y"}, {"insert": ") operation. We can do better. In particular, we might want to consider:\n\n"}, {"attributes": {"link": "#Linked_List_Implementation"}, "insert": "Linked list implementations"}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Disjoint Forests"}, {"attributes": {"list": "ordered"}, "insert": "\n"}]}, "text": "Array Implementation for Disjoint Sets\n\nA basic way of maintaining a disjoint-set datastructure. \n\n\n\n\nSuppose the elements we are storing are in the range [1..n]. We maintain an array R of representatives, where R[i] is the representative of i, and define the operations on the datastructure as:\n\n\n\n\nMake-Set(x): Set R[x] = x. This is O(1).\nFind-Set(x): Return the value of R[x]. This is O(1).\nUnion(x,y): For each element i of R, if R[i] = x, then set R[i] = y. This is O(n) (!!)\n\n\n\n\nWe are not a fan of the O(n) Union(x,y) operation. We can do better. In particular, we might want to consider:\n\n\n\n\nLinked list implementations\nDisjoint Forests", "updatedAt": 1714599688095, "embeddings": ["-0.50278544", "-0.6733462", "-0.40601775", "-0.016707335", "0.119752124", "0.0056855297", "-0.6914464", "0.9949996", "1.2472564", "0.4112507", "1.3397914", "0.12938732", "-1.1838245", "-0.57485455", "-1.9149362", "-0.41569066", "-0.9136236", "0.7076701", "0.7613727", "0.28685883", "0.2821594", "-0.18131599", "1.2035198", "0.9454625", "0.18267685", "-1.0995867", "0.13631769", "0.32462314", "0.15673816", "-0.08834417", "0.26568276", "-0.14499556", "1.0634925", "0.33482742", "0.23532523", "-1.1305634", "-0.7455223", "-0.649963", "-0.17841308", "0.25925604", "-1.3520837", "-1.2150381", "-0.333245", "-1.01276", "0.8694106", "-0.040152397", "-0.68366635", "1.4795876", "-0.40026063", "-0.68569255", "0.3452037", "0.16631536", "0.59908503", "-0.37657788", "0.5958016", "0.36036456", "1.5533321", "0.30148533", "0.33617517", "-0.54865366", "0.20402844", "1.0384103", "0.34359473", "-0.5963337", "-0.09973254", "0.3634657", "-0.6536913", "0.59468704", "0.09194245", "0.35395828", "0.91838443", "-1.1730087", "0.60636985", "0.016424747", "0.303869", "0.91112524", "0.56919634", "-0.6824293", "-0.797456", "-1.2189376", "-0.18768473", "0.054951653", "-0.7202802", "0.16732532", "-1.1701102", "1.0973802", "0.27025783", "-0.7895781", "-1.1307636", "0.2789232", "-0.24581656", "0.715074", "0.20982361", "-0.028689727", "0.09427104", "0.88013667", "-0.5077464", "-1.7774699", "0.105311744", "1.8319123", "-0.3955758", "0.72306454", "1.4036943", "-0.9028721", "-0.6021197", "-0.87837416", "-0.9499794", "0.71553755", "-0.7470419", "0.038487263", "-1.6878902", "-0.86882675", "2.3720908", "1.2056178", "1.2528819", "-0.22682868", "0.8366634", "-1.0818359", "1.288999", "-1.6734651", "1.2825077", "0.27710316", "0.088435076", "0.13149385", "1.0137163", "0.27642897", "0.76579225", "1.1293567", "0.90139145", "-0.76613176", "0.6623366", "-0.19655235", "-0.7309155", "1.5000724", "-1.0420618", "-0.5911676", "-0.048893727", "0.0776821", "-0.48826987", "-0.58468515", "0.081075445", "-0.70480907", "-1.1213238", "-0.8502436", "-1.2741277", "-1.1274518", "0.3667029", "0.10712447", "-0.25375363", "-1.2067907", "-0.660065", "-0.2337596", "-0.88086134", "0.06918393", "-0.40952185", "-1.1179155", "0.5423709", "0.28788185", "0.10963424", "-0.4694066", "-0.50106186", "1.9341347", "0.58804214", "-0.44420522", "-0.2573082", "0.0025726308", "0.7042901", "-0.0052933916", "-0.84041965", "-1.2921743", "1.8051822", "0.05089724", "-1.1044239", "0.12666853", "0.16746171", "0.44342035", "0.08906412", "0.027485728", "0.7798775", "0.52934134", "-0.28159368", "0.13434067", "0.62806016", "0.090521", "-0.41890085", "0.33553126", "-0.29124713", "1.278704", "2.0500488", "1.087927", "0.18748248", "0.7223765", "1.3188797", "0.45717707", "-0.70411116", "0.26585576", "0.08347664", "-0.03810147", "-0.043147597", "1.0776951"]}