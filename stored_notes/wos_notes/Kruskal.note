{"title": "Kruskal's algorithm", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Kruskal's algorithm"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "Not actually very relevant to the "}, {"attributes": {"link": "#Algorithms_and_Data_Structures"}, "insert": "ADS"}, {"insert": " course; it's more of a "}, {"attributes": {"color": "#50c75a"}, "insert": "DAA "}, {"insert": "thing. All you need to know is that it finds a "}, {"attributes": {"link": "#MST"}, "insert": "minimum spanning tree"}, {"insert": " on a graph by considering the set of edges, and that it tends to be implemented with "}, {"attributes": {"link": "#Disjoint_Sets"}, "insert": "disjoint sets"}, {"insert": ".\n"}]}, "text": "Kruskal's algorithm\n\nNot actually very relevant to the ADS course; it's more of a DAA thing. All you need to know is that it finds a minimum spanning tree on a graph by considering the set of edges, and that it tends to be implemented with disjoint sets.", "updatedAt": 1714597698718, "embeddings": ["-0.5486293", "-0.5039401", "-0.5874315", "0.1518268", "0.20480402", "-0.13150929", "-0.8621062", "0.92113197", "1.3063217", "0.24004753", "1.2651697", "0.09258016", "-1.0356655", "-0.5002285", "-1.9414066", "-0.6927654", "-0.9922988", "0.7757639", "1.0552576", "0.04290518", "0.21286657", "-0.19850478", "0.84568995", "0.8418058", "-0.017915914", "-1.0607178", "0.109681286", "0.22721083", "-0.053845603", "-0.032700654", "0.23909381", "0.035035346", "1.2758824", "0.20306504", "0.12414038", "-0.93070173", "-0.659952", "-0.46306708", "-0.3322343", "0.4095629", "-1.4137213", "-1.2069991", "-0.25655097", "-0.7953315", "1.0570513", "0.085691564", "-0.5758395", "1.6439319", "-0.45166254", "-0.63787204", "-0.028817479", "0.3585828", "0.57400554", "-0.45679608", "0.57565504", "0.3210226", "1.4732548", "0.48676288", "0.27136502", "-0.39903933", "0.09570161", "1.0334203", "0.36768922", "-0.7676387", "-0.21374074", "0.5337111", "-0.48685023", "0.54109156", "0.17963165", "0.24612848", "1.1417886", "-1.2148055", "0.5432571", "0.24629715", "0.23308586", "0.7066323", "0.4856463", "-0.4019366", "-1.0540732", "-0.9138564", "-0.078108914", "0.14048237", "-0.6848819", "-0.07421713", "-1.2642568", "1.1433351", "0.20621516", "-0.7595053", "-1.1425567", "0.081896886", "-0.2637803", "0.7465331", "0.121784344", "0.13387312", "0.14885823", "1.0709051", "-0.5954273", "-1.9417839", "0.077188894", "1.6708056", "-0.41092172", "0.7384042", "1.6575714", "-0.8277303", "-0.5008817", "-0.8053193", "-0.9178365", "0.42120442", "-0.7422695", "-0.17808698", "-1.8363277", "-1.2446208", "2.3377788", "1.3024267", "1.2997973", "-0.047902107", "0.88293606", "-1.0249236", "1.1365998", "-1.7975779", "1.6046113", "0.27009517", "0.078596495", "0.05537658", "1.0035994", "0.29991794", "0.90341675", "1.372714", "0.653481", "-0.9293771", "0.79235554", "-0.482398", "-0.748377", "1.4645518", "-1.2716049", "-0.595802", "0.07954021", "-0.04869088", "-0.46789306", "-0.7831704", "0.13380224", "-0.79989785", "-1.2046782", "-0.9412517", "-1.48403", "-1.1720316", "0.21977547", "0.17380895", "-0.10872074", "-1.3579026", "-0.54041976", "-0.038032245", "-0.7025479", "0.048888728", "-0.42214474", "-1.127465", "0.4018251", "0.1749048", "0.017743547", "-0.65530556", "-0.35747638", "2.0666625", "0.5581974", "-0.48409295", "-0.0758268", "0.056675594", "0.7371072", "0.026338778", "-0.8022663", "-1.2681158", "1.9690919", "-0.2457996", "-1.0975282", "0.038122993", "0.047267474", "0.7147139", "0.21532053", "0.091356084", "0.7876669", "0.46737498", "-0.33139285", "0.044838294", "0.43302128", "-0.031269535", "-0.33014387", "0.11901274", "-0.28406838", "1.3985455", "2.0749676", "1.318472", "0.012508741", "0.52072537", "1.171049", "0.5584967", "-0.7308334", "0.6222019", "0.097840875", "-0.033531375", "0.012423273", "1.1052226"]}