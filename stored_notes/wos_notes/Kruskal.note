{"title": "Kruskal's algorithm", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Kruskal's algorithm"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "Not actually very relevant to the "}, {"attributes": {"link": "#Algorithms_and_Data_Structures"}, "insert": "ADS"}, {"insert": " course; it's more of a "}, {"attributes": {"color": "#50c75a"}, "insert": "DAA "}, {"insert": "thing. All you need to know is that it finds a "}, {"attributes": {"link": "#MST"}, "insert": "minimum spanning tree"}, {"insert": " on a graph by considering the set of edges, and that it tends to be implemented with "}, {"attributes": {"link": "#Disjoint_Sets"}, "insert": "disjoint sets"}, {"insert": ".\n"}]}, "text": "Kruskal's algorithm\n\nNot actually very relevant to the ADS course; it's more of a DAA thing. All you need to know is that it finds a minimum spanning tree on a graph by considering the set of edges, and that it tends to be implemented with disjoint sets.", "updatedAt": 1714597698718, "embeddings": ["1.1666231", "-0.954378", "0.4827387", "-0.27611983", "-0.32836992", "-0.26274654", "0.4227625", "1.0882457", "0.5193808", "-1.1779056", "-0.036472194", "-0.9753596", "0.2113084", "-0.05471777", "-1.2874539", "0.4667371", "1.782962", "-0.28327337", "0.17846261", "0.24176966", "0.747062", "-0.09016396", "0.46103606", "0.1697751", "-1.1552926", "1.5598111", "0.4512542", "0.73674726", "1.0351267", "-0.7892315", "1.359807", "0.6179637", "0.5585343", "-0.4712853", "-0.47987387", "-0.78957313", "-0.7547674", "0.5301888", "-0.56896514", "0.7373936", "-0.585747", "0.78475714", "-0.7884523", "-0.32956642", "0.91608745", "-1.0408269", "0.26834327", "-1.1729124", "-0.07872284", "-0.69254637", "-0.46319214", "-0.52713466", "1.5285263", "-1.1292766", "-0.5498028", "-0.67819273", "0.14670624", "-0.123740956", "-0.941557", "0.37068585", "0.8625717", "-0.4750845", "0.8768481", "-0.6995267", "0.7312368", "0.11171584", "0.47055823", "1.655862", "-0.76769465", "0.14928728", "-0.12856255", "-1.0770156", "-0.018364217", "0.7324627", "0.108328834", "0.64106345", "-0.6331171", "-1.7228531", "0.81841165", "-0.02604999", "-0.030361516", "0.030262964", "-1.0847728", "0.37619728", "-1.1991452", "0.298508", "-0.4921569", "0.38904124", "-0.31446037", "0.54484445", "1.3057739", "0.62935686", "1.0439837", "0.8572355", "-0.107080005", "0.25819656", "0.7260568", "0.5841234", "-0.38460368", "0.9334408", "-0.2503763", "0.7275049", "-0.11637454", "-0.27324292", "0.5065024", "-0.9786128", "0.7819283", "-0.90685046", "0.213417", "-1.3834039", "0.7565556", "-1.5732622", "-0.5727988", "-0.0042223986", "-0.8240299", "-0.6928195", "-0.8126229", "-1.803104", "0.10287298", "0.1504847", "-0.7591838", "0.53390944", "0.109359734", "0.17610195", "0.71139246", "1.0693038", "0.47434056", "0.05681996", "-0.8706268", "-0.07715245", "0.0513516", "0.53079754", "0.76887786", "1.1393275", "0.96733826", "1.4464525", "0.08131981", "-0.28789192", "1.6232667", "-0.014062135", "1.1146585", "-0.53446615", "-0.92047775", "-0.63211155", "-1.7481216", "-0.48331118", "-0.899937", "0.5064853", "-0.024887305", "-0.4105407", "1.3305434", "-0.024379477", "-0.7684074", "-1.0861875", "-0.65508753", "0.14262271", "0.41551945", "0.19045569", "-0.37225568", "-0.07676719", "-0.20557599", "-0.6899341", "-0.124697514", "0.2963629", "0.064076915", "1.6923684", "-0.3316986", "-0.23543227", "0.5454046", "-0.43038934", "0.70671564", "1.2046292", "-0.13762556", "0.000334383", "1.0842443", "-0.0292505", "-0.08646048", "0.15277387", "0.124623284", "1.2509954", "-0.24656953", "1.0024846", "0.17498475", "0.12368299", "-0.069653325", "-0.23691334", "-0.3267086", "0.51336884", "1.7911801", "1.1470563", "-0.8595621", "-1.7185452", "-0.52692", "-1.2449913", "-0.01716549", "0.40657133", "0.7559294", "-2.0627174", "0.46354914", "-0.3086487"]}