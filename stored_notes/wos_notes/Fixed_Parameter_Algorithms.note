{"title": "Fixed Parameter Algorithms", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Fixed Parameter Algorithms"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "When considering "}, {"attributes": {"link": "#NP_Completeness"}, "insert": "NP-Complete"}, {"insert": " problems, even if we don't have a"}, {"attributes": {"color": "#50c75a"}, "insert": " polynomial-time"}, {"insert": " algorithm, we still care about the "}, {"attributes": {"color": "#98add9"}, "insert": "time complexity"}, {"insert": " of our "}, {"attributes": {"color": "#50c75a"}, "insert": "exponential "}, {"insert": "algorithms. For instance, "}, {"attributes": {"color": "#98add9"}, "insert": "O(2^k)"}, {"insert": " is far better than "}, {"attributes": {"color": "#98add9"}, "insert": "O(n^k)"}, {"insert": " for large n.\n\nIn particular, we want a "}, {"attributes": {"color": "#50c75a"}, "insert": "parametrisation "}, {"insert": "of a problem - a computable function which maps a problem instance "}, {"attributes": {"color": "#98add9"}, "insert": "<I> "}, {"insert": "to an integer "}, {"attributes": {"color": "#98add9"}, "insert": "k"}, {"insert": ". If "}, {"attributes": {"color": "#98add9"}, "insert": "k"}, {"insert": " is "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": ", the overall runtime of the algorithm is "}, {"attributes": {"color": "#98add9"}, "insert": "polynomial"}, {"insert": ".\n\nTo get a "}, {"attributes": {"color": "#47a1b3"}, "insert": "fixed-parameter algorithm"}, {"insert": ", we use the following techniques:\n\n"}, {"attributes": {"link": "#Bounded_Search_Trees"}, "insert": "Bounded-search trees"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"attributes": {"link": "#Kernelisation"}, "insert": "Kernelisation"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"attributes": {"link": "#Colour_Coding"}, "insert": "Colour-coding"}, {"attributes": {"list": "bullet"}, "insert": "\n"}]}, "text": "Fixed Parameter Algorithms\n\nWhen considering NP-Complete problems, even if we don't have a polynomial-time algorithm, we still care about the time complexity of our exponential algorithms. For instance, O(2^k) is far better than O(n^k) for large n.\n\n\n\n\nIn particular, we want a parametrisation of a problem - a computable function which maps a problem instance <I> to an integer k. If k is O(1), the overall runtime of the algorithm is polynomial.\n\n\n\n\nTo get a fixed-parameter algorithm, we use the following techniques:\n\n\n\n\nBounded-search trees\nKernelisation\nColour-coding", "updatedAt": 1714593367896, "embeddings": ["-0.6985377", "-0.55090564", "-0.5822315", "-0.03347825", "-0.003661092", "-0.020012556", "-0.6680676", "1.0224472", "1.1695015", "0.496865", "1.3023953", "0.25383016", "-1.3359432", "-0.50492305", "-1.9635913", "-0.37234253", "-0.9525259", "0.51151633", "0.95217353", "0.13317952", "0.18172246", "-0.09142181", "0.9482174", "0.8841153", "0.2555259", "-1.1160976", "0.17886358", "0.4727529", "-0.04272175", "0.101218686", "0.3257868", "-0.2568199", "1.1919425", "0.22584963", "-0.026272614", "-0.982001", "-0.73836476", "-0.82964617", "-0.3661491", "0.25328553", "-1.2629963", "-0.89807266", "-0.27778056", "-0.97158235", "1.0795491", "0.11961372", "-0.7411559", "1.8139834", "-0.44203398", "-0.75376076", "0.09091531", "0.28871578", "0.58165777", "-0.49965015", "0.5873195", "0.27802792", "1.36953", "0.1043901", "0.23516244", "-0.7079189", "-0.2005796", "1.199594", "0.43828112", "-0.8145371", "-0.09106315", "0.3128426", "-0.56719", "0.5548782", "0.22238436", "0.15683876", "1.4071218", "-1.3665318", "0.7662957", "0.22967356", "0.11528035", "0.8565214", "0.69699293", "-0.41803288", "-0.7871838", "-1.0472944", "-0.13304262", "0.099135816", "-0.4555808", "0.035232853", "-1.2259941", "1.2308561", "0.3335364", "-0.90120125", "-1.0616858", "0.065144055", "-0.08133336", "0.74874854", "0.37932083", "0.010760169", "-0.09053619", "0.95609415", "-0.58105516", "-1.9072814", "0.036335696", "1.6490841", "-0.3293665", "0.75801724", "1.4203911", "-0.9019373", "-0.47406498", "-0.90645444", "-0.5838119", "0.73485297", "-0.8069167", "-0.04724639", "-1.6965816", "-1.0775948", "2.402781", "1.2486386", "1.3844829", "-0.047553223", "0.8192399", "-1.0844098", "1.2188897", "-1.6322522", "1.6477274", "0.40709534", "0.15361196", "0.009339372", "1.0193747", "0.25480995", "0.5983642", "0.95134825", "0.65106946", "-0.5138458", "0.86081684", "-0.2768102", "-0.7726924", "1.3300921", "-1.091878", "-0.43026522", "-0.09139289", "-0.21884194", "-0.41815683", "-0.97358096", "0.40675235", "-0.8201926", "-1.1635629", "-1.1508247", "-1.4636061", "-1.130014", "0.21443088", "0.37800118", "-0.1716791", "-1.2501248", "-0.35771248", "-0.1228171", "-0.9036601", "0.013198695", "-0.47611108", "-1.1303225", "0.4344866", "0.29870507", "0.14276917", "-0.48432687", "-0.33359435", "2.1940994", "0.44010586", "-0.5044777", "-0.12948121", "-0.071899146", "0.51318276", "0.14600132", "-0.7650553", "-1.4256802", "1.8610847", "-0.1838259", "-1.109292", "0.27167895", "0.41600278", "0.688263", "-0.032106865", "0.06104852", "0.7398012", "0.64462686", "-0.1657478", "-0.008725821", "0.5532032", "0.23640878", "-0.35658818", "0.3363598", "-0.24032272", "1.3891197", "2.1664135", "1.1143299", "0.07695517", "0.39447916", "1.1550088", "0.66465557", "-0.7987376", "0.547934", "0.19681528", "-0.35019532", "-0.01850305", "1.0825709"]}