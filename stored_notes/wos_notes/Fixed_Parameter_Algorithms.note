{"title": "Fixed Parameter Algorithms", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Fixed Parameter Algorithms"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "When considering "}, {"attributes": {"link": "#NP_Completeness"}, "insert": "NP-Complete"}, {"insert": " problems, even if we don't have a"}, {"attributes": {"color": "#50c75a"}, "insert": " polynomial-time"}, {"insert": " algorithm, we still care about the "}, {"attributes": {"color": "#98add9"}, "insert": "time complexity"}, {"insert": " of our "}, {"attributes": {"color": "#50c75a"}, "insert": "exponential "}, {"insert": "algorithms. For instance, "}, {"attributes": {"color": "#98add9"}, "insert": "O(2^k)"}, {"insert": " is far better than "}, {"attributes": {"color": "#98add9"}, "insert": "O(n^k)"}, {"insert": " for large n.\n\nIn particular, we want a "}, {"attributes": {"color": "#50c75a"}, "insert": "parametrisation "}, {"insert": "of a problem - a computable function which maps a problem instance "}, {"attributes": {"color": "#98add9"}, "insert": "<I> "}, {"insert": "to an integer "}, {"attributes": {"color": "#98add9"}, "insert": "k"}, {"insert": ". If "}, {"attributes": {"color": "#98add9"}, "insert": "k"}, {"insert": " is "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": ", the overall runtime of the algorithm is "}, {"attributes": {"color": "#98add9"}, "insert": "polynomial"}, {"insert": ".\n\nTo get a "}, {"attributes": {"color": "#47a1b3"}, "insert": "fixed-parameter algorithm"}, {"insert": ", we use the following techniques:\n\n"}, {"attributes": {"link": "#Bounded_Search_Trees"}, "insert": "Bounded-search trees"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"attributes": {"link": "#Kernelisation"}, "insert": "Kernelisation"}, {"attributes": {"list": "bullet"}, "insert": "\n"}, {"attributes": {"link": "#Colour_Coding"}, "insert": "Colour-coding"}, {"attributes": {"list": "bullet"}, "insert": "\n"}]}, "text": "Fixed Parameter Algorithms\n\nWhen considering NP-Complete problems, even if we don't have a polynomial-time algorithm, we still care about the time complexity of our exponential algorithms. For instance, O(2^k) is far better than O(n^k) for large n.\n\n\n\n\nIn particular, we want a parametrisation of a problem - a computable function which maps a problem instance <I> to an integer k. If k is O(1), the overall runtime of the algorithm is polynomial.\n\n\n\n\nTo get a fixed-parameter algorithm, we use the following techniques:\n\n\n\n\nBounded-search trees\nKernelisation\nColour-coding", "updatedAt": 1714593367896, "embeddings": ["1.1362396", "-0.57059294", "0.1393704", "-0.4180948", "-0.47224286", "-0.5155674", "0.49472857", "1.4103719", "0.3823867", "-1.0391544", "-0.118244946", "-1.0976301", "0.20237565", "-0.0030037987", "-1.0681504", "0.6996812", "1.8148746", "-0.19899797", "0.28337282", "0.1985405", "0.933742", "-0.21211739", "0.5470415", "0.41848812", "-1.3042127", "1.3885354", "0.21337272", "0.69361836", "1.0535055", "-0.96633863", "1.2840521", "0.7058416", "0.86444306", "-0.50233936", "-0.73959076", "-0.6996606", "-0.7823155", "0.5182306", "-0.9283394", "0.62094575", "-0.86402625", "0.61298406", "-0.6435724", "-0.4032536", "0.8841051", "-1.041017", "0.18332529", "-1.1735202", "-0.1595664", "-0.6010148", "-0.4843641", "-0.548538", "1.3999883", "-1.2623669", "-0.6056956", "-0.89315075", "0.10372324", "-0.4436405", "-0.77076364", "0.17541203", "0.8755638", "-0.41375616", "0.8170975", "-0.77261496", "0.7494138", "-0.03105845", "0.42897546", "1.5274124", "-0.87315005", "0.3830693", "-0.28646827", "-1.0298408", "-0.12420383", "0.6563803", "0.13726884", "0.7284951", "-0.54136866", "-1.7127762", "0.71454793", "-0.04391406", "-0.09425709", "-0.025714587", "-1.2875403", "0.4280917", "-1.3890463", "0.19703996", "-0.5290052", "0.42615882", "-0.39295173", "0.7198431", "1.2448102", "0.57303256", "0.8297883", "0.8216359", "-0.051808424", "0.011129748", "0.89812756", "0.70855945", "-0.50381416", "0.8242619", "-0.337792", "0.8253606", "-0.2826571", "0.027730772", "0.7433822", "-0.8799721", "0.712284", "-0.9818949", "0.6058548", "-1.2544836", "0.65093935", "-1.4543327", "-0.36329785", "0.033323742", "-0.76828504", "-0.6154745", "-0.62816876", "-1.7238681", "0.21723631", "0.06533858", "-0.50440305", "0.64260286", "0.3174075", "-0.12869203", "0.72946036", "1.0461593", "0.48276782", "-0.16850363", "-0.94869876", "-0.47860643", "0.139014", "0.31935224", "0.64500684", "1.1868198", "1.0107187", "1.3405122", "-0.04191215", "-0.5533633", "1.6389368", "-0.29184237", "1.1555712", "-0.61832255", "-0.88262033", "-0.6562436", "-1.7777389", "-0.46813732", "-0.9956309", "0.6267702", "-0.15182902", "-0.36935905", "1.2543359", "0.027886637", "-0.790425", "-0.89735156", "-0.60611475", "0.06636815", "0.31611803", "0.13726635", "-0.25824004", "-0.2314372", "-0.14174004", "-0.7032669", "-0.0750206", "0.17066646", "-0.14236766", "1.5176806", "-0.44841373", "-0.5870407", "0.5806235", "-0.5177093", "0.37124997", "1.1939688", "-0.05667022", "0.025394483", "1.0650923", "-0.07477315", "0.18075888", "0.082142875", "0.029051", "1.025641", "0.087274455", "1.0040569", "0.15270759", "0.3424156", "0.15737061", "-0.056837175", "-0.30179113", "0.18217297", "2.0710516", "0.91088885", "-0.8855544", "-1.8129019", "-0.43073922", "-1.4177136", "-0.02593136", "0.4368553", "0.7009789", "-2.3455555", "0.26811302", "-0.22704794"]}