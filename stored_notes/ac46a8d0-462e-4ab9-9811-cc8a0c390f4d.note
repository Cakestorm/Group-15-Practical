{"title": "Charging Arguments", "body": {"ops": [{"insert": "Charging Arguments"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "A"}, {"attributes": {"color": "#47a1b3"}, "insert": " charging argument"}, {"insert": " is a method of showing that a certain proportion of a data structure has some property. It's like "}, {"attributes": {"link": "#Amortised_Analysis"}, "insert": "amortising"}, {"insert": " the cost over a data structure.\n\nIn particular, if we have some element of the structure "}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": ", and we can distribute its cost of "}, {"attributes": {"color": "#98add9"}, "insert": "1"}, {"insert": " across "}, {"attributes": {"color": "#98add9"}, "insert": "k"}, {"insert": " other elements which each are charged "}, {"attributes": {"color": "#98add9"}, "insert": "at most once"}, {"insert": ", then the special element appears at most"}, {"attributes": {"color": "#98add9"}, "insert": " 1/k"}, {"insert": " times throughout the datastructure.\n\nAs a very basic example, consider an array of length "}, {"attributes": {"color": "#98add9"}, "insert": "n"}, {"insert": " where every other element is "}, {"attributes": {"color": "#50c75a"}, "insert": "green"}, {"insert": ". To prove that there are at most"}, {"attributes": {"color": "#98add9"}, "insert": " n/2"}, {"insert": " "}, {"attributes": {"color": "#50c75a"}, "insert": "green"}, {"insert": " elements, we simply spread the charge of each "}, {"attributes": {"color": "#50c75a"}, "insert": "green "}, {"insert": "element between itself and the element that precedes it. Each element of the array is charged at most once, and since we have "}, {"attributes": {"color": "#98add9"}, "insert": "n"}, {"insert": " elements, we get an amortised charge of "}, {"attributes": {"color": "#98add9"}, "insert": "n/2"}, {"insert": ". \n"}]}, "text": "Charging Arguments\n\nA charging argument is a method of showing that a certain proportion of a data structure has some property. It's like amortising the cost over a data structure.\n\n\n\n\nIn particular, if we have some element of the structure x, and we can distribute its cost of 1 across k other elements which each are charged at most once, then the special element appears at most 1/k times throughout the datastructure.\n\n\n\n\nAs a very basic example, consider an array of length n where every other element is green. To prove that there are at most n/2 green elements, we simply spread the charge of each green element between itself and the element that precedes it. Each element of the array is charged at most once, and since we have n elements, we get an amortised charge of n/2. ", "updatedAt": 1714765524738}