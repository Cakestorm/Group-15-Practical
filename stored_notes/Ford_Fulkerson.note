{"title": "Ford-Fulkerson Algorithm", "body": {"ops": [{"attributes": {"underline": true}, "insert": "Ford-Fulkerson Algorithm"}, {"attributes": {"header": 2}, "insert": "\n"}, {"attributes": {"background": "#ffffff", "color": "var(--YLNNHc)"}, "insert": "The Ford-Fulkerson algorithm works by\u00a0"}, {"attributes": {"background": "initial", "color": "#040c28", "bold": true}, "insert": "looking for a path with available capacity from the source to the sink (called an augmented path), and then sends as much flow as possible through that path"}, {"attributes": {"background": "#ffffff", "color": "var(--YLNNHc)"}, "insert": ". The Ford-Fulkerson algorithm continues to find new paths to send more flow through until the\u00a0maximum flow\u00a0is reached."}, {"insert": "\n\n"}, {"attributes": {"color": "#000000", "background": "#d9eee1", "bold": true}, "insert": "How it works:"}, {"insert": "\n"}, {"attributes": {"color": "#000000", "background": "#d9eee1"}, "insert": "Start with zero flow on all edges."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"attributes": {"color": "#000000", "background": "#d9eee1"}, "insert": "Find an\u00a0"}, {"attributes": {"color": "#000000", "background": "#d9eee1", "italic": true}, "insert": "augmented path"}, {"attributes": {"color": "#000000", "background": "#d9eee1"}, "insert": "\u00a0where more flow can be sent."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"attributes": {"color": "#000000", "background": "#d9eee1"}, "insert": "Do a\u00a0"}, {"attributes": {"color": "#000000", "background": "#d9eee1", "italic": true}, "insert": "bottleneck calculation"}, {"attributes": {"color": "#000000", "background": "#d9eee1"}, "insert": "\u00a0to find out how much flow can be sent through that augmented path."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"attributes": {"color": "#000000", "background": "#d9eee1"}, "insert": "Increase the flow found from the bottleneck calculation for each edge in the augmented path."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"attributes": {"color": "#000000", "background": "#d9eee1"}, "insert": "Repeat steps 2-4 until max flow is found. This happens when a new augmented path can no longer be found."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "\n"}]}, "text": "Ford-Fulkerson Algorithm\n\nThe Ford-Fulkerson algorithm works by\u00a0looking for a path with available capacity from the source to the sink (called an augmented path), and then sends as much flow as possible through that path. The Ford-Fulkerson algorithm continues to find new paths to send more flow through until the\u00a0maximum flow\u00a0is reached.\n\n\n\n\nHow it works:\n\nStart with zero flow on all edges.\nFind an\u00a0augmented path\u00a0where more flow can be sent.\nDo a\u00a0bottleneck calculation\u00a0to find out how much flow can be sent through that augmented path.\nIncrease the flow found from the bottleneck calculation for each edge in the augmented path.\nRepeat steps 2-4 until max flow is found. This happens when a new augmented path can no longer be found.\n\n\n", "updatedAt": 1715165441934, "embeddings": ["-0.22851853", "0.18923804", "-1.6116998", "0.4070759", "2.014642", "0.10839147", "-2.372786", "0.33421114", "-1.2205642", "1.4543593", "1.3808007", "0.8325654", "-0.20515753", "1.2140069", "0.14957808", "0.61034936", "-0.23321901", "-0.24244252", "-0.7842088", "1.2503655", "0.31983066", "-0.9951973", "-0.1652574", "-2.3795369", "-0.516347", "3.110848", "-1.6010909", "-1.6590573", "-1.826216", "-1.822739", "-0.08653249", "-0.71224827", "0.46497044", "1.3239568", "0.9710553", "-0.5481691", "1.964167", "1.2168425", "1.624967", "0.50892013", "-0.74252594", "-0.5328457", "0.9080972", "-2.29445", "-0.28268048", "-0.14998187", "-1.868158", "0.028270047", "-0.33376336", "-0.8740148", "-1.6908852", "-0.06426014", "-1.244502", "-0.34531635", "-1.1300075", "0.81883985", "0.42121065", "2.538341", "0.7990745", "1.2748687", "0.8400993", "-0.31493223", "0.47896692", "0.9164532", "-1.806448", "1.1498953", "2.5470755", "2.4206378", "-1.2349201", "1.7199762", "-1.3687468", "-0.106158055", "0.8642145", "1.3215367", "0.2549013", "0.24024618", "-0.56577486", "-1.0163773", "-0.48361054", "-0.6465664", "-0.5353295", "-1.2590458", "-0.024021959", "-1.6972426", "2.0276606", "1.2708791", "1.3534154", "1.5611644", "1.0680709", "0.7074613", "-0.11987569", "1.969829", "1.5618429", "0.5291467", "-1.6526467", "2.0905259", "-1.169377", "0.68265706", "-0.49671483", "0.8656056", "-1.9472575", "-0.7571066", "-0.74369574", "0.2975379", "0.8756949", "-0.558244", "-0.24441701", "0.17911208", "0.19174081", "0.1937692", "-1.2083127", "-0.09786629", "-0.4702549", "1.462082", "0.10564301", "0.34646404", "-0.82124114", "1.7059422", "0.41082132", "1.3376818", "0.076780125", "1.5603036", "-2.227141", "-1.7160589", "-1.4710974", "0.7297494", "-0.9748632", "-2.674193", "0.51442116", "0.10258106", "0.10072443", "0.16825095", "-0.10893539", "0.8507258", "-0.39298767", "2.8392265", "-1.0274162", "1.594823", "-1.592186", "-1.4449204", "0.8275049", "-0.2592779", "-2.6262255", "-1.2455164", "-2.4585927", "-0.94455963", "0.06428343", "-1.6156943", "0.8068126", "0.008594322", "-0.19792616", "-0.2685214", "-0.17217384", "-1.3783387", "0.97308993", "0.108118676", "0.65309507", "1.2471877", "-0.39665785", "-1.2604059", "-0.22446224", "1.2295498", "-0.9540385", "-0.54165626", "0.47949737", "-0.087864704", "0.47209206", "-3.1200547", "-0.8790531", "1.4873375", "-0.58672345", "0.021189608", "-0.35552394", "-0.037666954", "1.982228", "-1.040194", "0.1787393", "2.0802279", "-0.91730356", "-0.31560192", "0.95070326", "-0.922346", "-1.193314", "-0.37829944", "1.1007278", "-1.9137623", "-1.0227711", "-1.6128825", "1.0984377", "1.9117053", "-0.10643194", "-0.66428614", "-0.19393937", "-1.5746648", "0.086136125", "0.6575585", "1.431863", "0.6908285", "-0.98822516", "2.7747433"]}