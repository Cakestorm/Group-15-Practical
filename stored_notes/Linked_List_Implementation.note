{"title": "Linked Lists for Disjoint Sets", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Linked Lists for Disjoint Sets"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "We might use a "}, {"attributes": {"color": "#47a1b3"}, "insert": "linked list"}, {"insert": " to implement a "}, {"attributes": {"link": "#Disjoint_Sets"}, "insert": "disjoint-set datastructure"}, {"insert": ". We represent each "}, {"attributes": {"color": "#98add9"}, "insert": "set "}, {"insert": "by a"}, {"attributes": {"color": "#47a1b3"}, "insert": " linked list"}, {"insert": ", and store those "}, {"attributes": {"color": "#47a1b3"}, "insert": "linked lists"}, {"insert": " in their own "}, {"attributes": {"color": "#47a1b3"}, "insert": "higher-level linked list"}, {"insert": ". We keep "}, {"attributes": {"color": "#50c75a"}, "insert": "pointers "}, {"insert": "to the first and last elements of the "}, {"attributes": {"color": "#47a1b3"}, "insert": "list"}, {"insert": ".\n\nWe implement the operations as follows:\n\nMake-Set("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": "): Append a singleton list "}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": " to the "}, {"attributes": {"color": "#47a1b3"}, "insert": "main list"}, {"insert": ", and update "}, {"attributes": {"color": "#50c75a"}, "insert": "pointers"}, {"insert": ". "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Find-Set("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": "): Follow the"}, {"attributes": {"color": "#50c75a"}, "insert": " head pointer"}, {"insert": " until reaching "}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": ". "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Union("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "y"}, {"insert": "): Append the list containing "}, {"attributes": {"color": "#98add9"}, "insert": "y"}, {"insert": " to the list containing "}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": ". Then update "}, {"attributes": {"color": "#50c75a"}, "insert": "head pointers"}, {"insert": ". "}, {"attributes": {"color": "#98add9"}, "insert": "O(|T|)"}, {"insert": ", where "}, {"attributes": {"color": "#98add9"}, "insert": "|T|"}, {"insert": " is the size of the list containing "}, {"attributes": {"color": "#98add9"}, "insert": "y"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "\nWe can do somewhat better with Union("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "y"}, {"insert": ") by ensuring "}, {"attributes": {"color": "#98add9"}, "insert": "y"}, {"insert": " is the shorter list, by maintaining the "}, {"attributes": {"color": "#50c75a"}, "insert": "length "}, {"insert": "of each "}, {"attributes": {"color": "#47a1b3"}, "insert": "list "}, {"insert": "in its "}, {"attributes": {"color": "#50c75a"}, "insert": "head "}, {"attributes": {"color": "#edfaff"}, "insert": "- we call this the "}, {"attributes": {"color": "#47a1b3"}, "insert": "Weighted-Union heuristic"}, {"attributes": {"color": "#edfaff"}, "insert": "."}, {"insert": "\n\nDoing so, a sequence of "}, {"attributes": {"color": "#98add9"}, "insert": "m"}, {"insert": " operations on a structure with "}, {"attributes": {"color": "#98add9"}, "insert": "n"}, {"insert": " elements takes "}, {"attributes": {"color": "#98add9"}, "insert": "O(m + n log n)"}, {"insert": " time.\n\nWe prove this using the "}, {"attributes": {"link": "#Aggregate"}, "insert": "aggregate method"}, {"insert": ": each of Make-Set and Find-Set take only "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": " time, so "}, {"attributes": {"color": "#98add9"}, "insert": "m "}, {"insert": "of these will take "}, {"attributes": {"color": "#98add9"}, "insert": "O(m)"}, {"insert": " time.\n\nFor Union, we only need the fact that the "}, {"attributes": {"color": "#50c75a"}, "insert": "head pointer"}, {"insert": " of any element "}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": " is updated at most "}, {"attributes": {"color": "#98add9"}, "insert": "log n"}, {"insert": " times. Since the cost of a Union operation is "}, {"attributes": {"color": "#98add9"}, "insert": "O(# of head updates)"}, {"insert": ", this means the"}, {"attributes": {"color": "#98add9"}, "insert": " total cost "}, {"insert": "of these operations is "}, {"attributes": {"color": "#98add9"}, "insert": "O(n log n)"}, {"insert": ".\n\nWe prove this fact since we know that, as we link the "}, {"attributes": {"color": "#47a1b3"}, "insert": "head "}, {"insert": "of the "}, {"attributes": {"color": "#47a1b3"}, "insert": "shorter list"}, {"insert": " to the "}, {"attributes": {"color": "#47a1b3"}, "insert": "longer"}, {"insert": ", the "}, {"attributes": {"color": "#47a1b3"}, "insert": "shorter list"}, {"insert": "'s "}, {"attributes": {"color": "#50c75a"}, "insert": "length "}, {"insert": "grows by at least 2 for each Union operation. Since we have "}, {"attributes": {"color": "#98add9"}, "insert": "n"}, {"insert": " elements, the list can therefore grow at most"}, {"attributes": {"color": "#98add9"}, "insert": " log n"}, {"insert": " times.\n"}]}, "text": "Linked Lists for Disjoint Sets\n\nWe might use a linked list to implement a disjoint-set datastructure. We represent each set by a linked list, and store those linked lists in their own higher-level linked list. We keep pointers to the first and last elements of the list.\n\n\n\n\nWe implement the operations as follows:\n\n\n\n\nMake-Set(x): Append a singleton list x to the main list, and update pointers. O(1).\nFind-Set(x): Follow the head pointer until reaching x. O(1).\nUnion(x,y): Append the list containing y to the list containing x. Then update head pointers. O(|T|), where |T| is the size of the list containing y.\n\n\n\n\nWe can do somewhat better with Union(x,y) by ensuring y is the shorter list, by maintaining the length of each list in its head - we call this the Weighted-Union heuristic.\n\n\n\n\nDoing so, a sequence of m operations on a structure with n elements takes O(m + n log n) time.\n\n\n\n\nWe prove this using the aggregate method: each of Make-Set and Find-Set take only O(1) time, so m of these will take O(m) time.\n\n\n\n\nFor Union, we only need the fact that the head pointer of any element x is updated at most log n times. Since the cost of a Union operation is O(# of head updates), this means the total cost of these operations is O(n log n).\n\n\n\n\nWe prove this fact since we know that, as we link the head of the shorter list to the longer, the shorter list's length grows by at least 2 for each Union operation. Since we have n elements, the list can therefore grow at most log n times.", "updatedAt": 1714660659168, "embeddings": ["-0.47484282", "-1.6703955", "4.2292647", "0.9432021", "0.2703402", "0.27173236", "-2.491026", "1.784712", "0.046324495", "2.9159908", "0.9121425", "-1.4421358", "0.46637696", "-1.693366", "0.49899873", "1.0699704", "-0.67529655", "0.4078285", "0.89240944", "1.2096918", "-1.383293", "0.35617357", "1.2519256", "-1.3833103", "0.05223334", "0.3598091", "-1.396162", "-2.1247644", "-0.09504799", "-1.9681734", "-2.8836823", "-0.30481526", "-1.7650412", "2.8377237", "-2.2343173", "-0.74438614", "0.96527374", "0.5950509", "2.1935132", "0.6669237", "0.80440694", "-0.2702502", "1.4556688", "-0.42273784", "0.50758463", "0.47120035", "-0.2994297", "3.9605954", "2.4117072", "2.1943796", "-0.7596907", "2.2477024", "1.1655988", "-0.5391605", "-0.7603561", "-0.29038998", "-0.2312825", "-0.87665707", "0.48077303", "-1.3271456", "1.0067588", "-0.2678148", "-0.75783914", "-2.865693", "-0.27315363", "0.5632272", "-0.98816437", "1.0832239", "-0.8503082", "-0.2509865", "-3.078197", "-0.7194804", "2.6690304", "-0.5503669", "-0.16416837", "-0.11739041", "-0.42485765", "0.90937746", "1.0498238", "-1.2423202", "-2.6669593", "-0.55271935", "1.525964", "-2.546938", "0.32991037", "0.82704085", "0.85272884", "-0.425772", "-0.33442304", "-1.4488775", "0.31392273", "0.32447103", "1.6377422", "-0.21112745", "0.97191846", "1.9488907", "-0.55735433", "2.4874158", "-1.5374973", "-1.1320753", "-1.7783852", "-0.76128", "-1.224311", "0.81155187", "-1.9804695", "-1.5244384", "0.025502404", "1.4625475", "0.73170674", "1.6695265", "-2.1164107", "0.014716612", "-0.5911993", "-2.5268087", "0.6783873", "-3.5054593", "0.7028962", "-1.8700542", "2.1294923", "1.0111952", "-0.5056564", "2.3663924", "0.77720994", "1.2441403", "-0.64298576", "0.11889129", "0.35925797", "-1.9469632", "2.7055886", "3.5964358", "1.2236787", "2.7037592", "-2.5010726", "-0.91464156", "0.48665005", "-0.07711543", "0.11974353", "1.3766843", "-1.2271323", "1.0637195", "1.6671481", "0.5770009", "-1.93494", "2.3922708", "-2.0143843", "1.3249367", "-0.7573194", "2.6083736", "1.1864457", "1.0831946", "1.2253548", "0.46410963", "-1.3372302", "0.044325862", "2.686203", "0.8459183", "-0.9357019", "1.8309366", "-0.26110712", "1.5770198", "2.4015958", "2.0570424", "-1.8515546", "-3.4218218", "-0.37702972", "-1.3597201", "0.41518545", "-1.6352224", "1.1349566", "0.16989098", "1.101601", "2.5776987", "-1.8560367", "1.8630297", "0.34007347", "0.9499521", "-0.6110583", "-0.4922021", "1.9384812", "-1.7070754", "-0.38471287", "-0.32262623", "0.44730353", "1.6918085", "-1.0578362", "-2.5029225", "-1.534278", "-0.8301465", "0.18432021", "-1.7561339", "0.012178014", "-0.904937", "-1.7367244", "-1.6566367", "0.74487615", "-1.2253722", "2.1076143", "1.7310293", "-0.5335471", "-0.28430912"]}