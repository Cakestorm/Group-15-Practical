{"title": "Array Implementation for Disjoint Sets", "body": {"ops": [{"attributes": {"alt": "STRUCTURAL ELEMENTS: Heading level 2"}, "insert": {"image": "moz-extension://8e7074b9-66b6-424e-b54b-c19b7851ffab/img/icons/h2.svg"}}, {"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Array Implementation for Disjoint Sets"}, {"attributes": {"alt": "ALERTS: Underlined text", "color": "#47a1b3", "underline": true}, "insert": {"image": "moz-extension://8e7074b9-66b6-424e-b54b-c19b7851ffab/img/icons/underline.svg"}}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "A basic way of maintaining a "}, {"attributes": {"link": "#Disjoint_Sets"}, "insert": "disjoint-set datastructure"}, {"attributes": {"alt": "ALERTS: Broken same-page link", "link": "#Disjoint_Sets"}, "insert": {"image": "moz-extension://8e7074b9-66b6-424e-b54b-c19b7851ffab/img/icons/link_internal_broken.svg"}}, {"insert": ". \n\nSuppose the elements we are storing are in the range [1..n]. We maintain an array R of representatives, where R[i] is the representative of i, and define the operations on the datastructure as:\n\nMake-Set(x): Set R[x] = x. This is O(1)."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Find-Set(x): Return the value of R[x]. This is O(1)."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Union(x,y): For each element i of R, if R[i] = x, then set R[i] = y. This is O(n) (!!)"}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "\nWe are not a fan of the O(n) Union(x,y) operation. We can do better. In particular, we might want to consider:\n\n"}, {"attributes": {"link": "#Linked_List_Implementation"}, "insert": "Linked list implementations"}, {"attributes": {"alt": "ALERTS: Broken same-page link", "link": "#Linked_List_Implementation"}, "insert": {"image": "moz-extension://8e7074b9-66b6-424e-b54b-c19b7851ffab/img/icons/link_internal_broken.svg"}}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Disjoint Forests"}, {"attributes": {"list": "ordered"}, "insert": "\n"}]}, "text": "Array Implementation for Disjoint Sets\n\nA basic way of maintaining a disjoint-set datastructure. \n\n\n\n\nSuppose the elements we are storing are in the range [1..n]. We maintain an array R of representatives, where R[i] is the representative of i, and define the operations on the datastructure as:\n\n\n\n\nMake-Set(x): Set R[x] = x. This is O(1).\nFind-Set(x): Return the value of R[x]. This is O(1).\nUnion(x,y): For each element i of R, if R[i] = x, then set R[i] = y. This is O(n) (!!)\n\n\n\n\nWe are not a fan of the O(n) Union(x,y) operation. We can do better. In particular, we might want to consider:\n\n\n\n\nLinked list implementations\nDisjoint Forests", "updatedAt": 1714698636280, "embeddings": ["-1.3955709", "-1.2420698", "0.54912114", "-0.1878021", "-0.33642218", "0.16284116", "-1.0806512", "1.4559419", "-1.4740576", "0.93778694", "0.7334845", "-0.6711981", "-1.2509223", "0.0053519537", "1.4971586", "0.50985146", "0.15176532", "-0.0687722", "-0.17542213", "0.58859605", "1.5417848", "0.376945", "0.6687205", "-1.2569176", "-0.2448506", "0.24498501", "0.30032942", "-1.461319", "-2.6462615", "-0.77462906", "-1.6958684", "0.66198856", "-0.24817476", "2.2772558", "0.6056238", "-0.7425874", "-0.6311275", "-1.5002352", "2.1855845", "-1.390006", "-0.92067224", "0.16486353", "-0.07957333", "-1.1971025", "1.3298527", "-0.3936143", "-0.081610136", "0.28736165", "-0.5771387", "0.43744487", "-0.33925882", "0.72299695", "0.6077965", "-0.45438844", "0.7285237", "0.06145329", "1.4996165", "-0.49017757", "-1.495032", "-0.7069346", "-0.99274844", "-1.513837", "-0.274805", "-1.6701274", "-0.042539548", "0.39636666", "1.3884228", "1.1995947", "0.3387547", "1.3844098", "-1.2753792", "-0.71646905", "1.440922", "1.1648949", "-1.0766674", "-0.8121765", "-1.006148", "0.0014523806", "0.60156405", "-0.58430904", "0.037063777", "-0.6886758", "0.3186184", "-0.7975299", "0.7928872", "-0.6311341", "-0.40324286", "-0.8267154", "0.078180924", "0.72303253", "-0.65403724", "0.38476017", "0.8582397", "0.06819123", "0.73242486", "2.6817172", "-1.2396843", "0.28783393", "-1.3575723", "-0.112868875", "-1.0340344", "0.42503008", "-0.42993006", "0.27415922", "0.91835666", "0.06845813", "-0.66995263", "0.7755181", "-0.094919905", "0.88726574", "0.6229936", "0.62395215", "0.69645756", "-2.057839", "1.7709", "-0.1419992", "-0.19294831", "-1.3982437", "-0.09540076", "0.54020065", "0.18166839", "1.3073796", "-0.070249975", "0.72452104", "0.5138306", "-1.6867273", "-1.0080674", "-0.90464514", "0.6898485", "1.5037903", "0.5005283", "2.0339184", "0.53713846", "-1.6881176", "-0.04089176", "0.3835867", "-0.30062938", "0.27962866", "0.38633502", "0.68287337", "0.048554815", "0.060222786", "-1.8418695", "0.5607792", "-1.0751386", "1.4131304", "0.514368", "1.7062715", "0.29863825", "0.99763656", "-0.82426554", "-0.3134727", "-0.7319205", "0.8435381", "1.3163859", "-0.06576088", "-0.59748155", "0.86485153", "-0.10378315", "0.2527825", "-0.66701645", "0.47714707", "-0.58601224", "-2.9961088", "-0.06452382", "-0.027472882", "-0.70162934", "-2.104385", "1.3556426", "0.2643717", "0.24365607", "0.3147733", "1.0284216", "0.39857024", "-0.5589748", "-0.46230844", "-0.055837337", "-1.7335924", "1.0542686", "-1.0685031", "-0.11302367", "-0.25174972", "0.3110262", "0.5139078", "-0.029485734", "-0.69916123", "0.7883746", "-0.2286422", "0.67128086", "-1.0970463", "-1.1824821", "-2.4237282", "-1.4380729", "-0.14638531", "0.6707528", "-1.1232237", "0.39239374", "0.3088029", "-0.12812547", "0.5989776"]}