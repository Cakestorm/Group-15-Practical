{"title": "Array Implementation for Disjoint Sets", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Array Implementation for Disjoint Sets"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "A basic way of maintaining a "}, {"attributes": {"link": "#Disjoint_Sets"}, "insert": "disjoint-set datastructure"}, {"insert": ". \n\nSuppose the elements we are storing are in the range "}, {"attributes": {"color": "#98add9"}, "insert": "[1..n]"}, {"insert": ". We maintain an array "}, {"attributes": {"color": "#98add9"}, "insert": "R"}, {"insert": " of "}, {"attributes": {"color": "#50c75a"}, "insert": "representatives"}, {"insert": ", where "}, {"attributes": {"color": "#98add9"}, "insert": "R[i]"}, {"insert": " is the "}, {"attributes": {"color": "#50c75a"}, "insert": "representative "}, {"insert": "of i, and define the operations on the datastructure as:\n\nMake-Set("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": "): Set "}, {"attributes": {"color": "#98add9"}, "insert": "R[x] = x"}, {"insert": ". This is "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Find-Set("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": "): Return the value of "}, {"attributes": {"color": "#98add9"}, "insert": "R[x]"}, {"insert": ". This is "}, {"attributes": {"color": "#98add9"}, "insert": "O(1)"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Union("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "y"}, {"insert": "): For each element "}, {"attributes": {"color": "#98add9"}, "insert": "i"}, {"insert": " of "}, {"attributes": {"color": "#98add9"}, "insert": "R"}, {"insert": ", if "}, {"attributes": {"color": "#98add9"}, "insert": "R[i] = x"}, {"insert": ", then set "}, {"attributes": {"color": "#98add9"}, "insert": "R[i] = y"}, {"insert": ". This is "}, {"attributes": {"color": "#47a1b3"}, "insert": "O(n)"}, {"insert": " "}, {"attributes": {"color": "#50c75a"}, "insert": "(!!)"}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "\nWe are not a fan of the "}, {"attributes": {"color": "#98add9"}, "insert": "O(n)"}, {"insert": " Union("}, {"attributes": {"color": "#98add9"}, "insert": "x"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "y"}, {"insert": ") operation. We can do better. In particular, we might want to consider:\n\n"}, {"attributes": {"link": "#Linked_List_Implementation"}, "insert": "Linked list implementations"}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Disjoint Forests"}, {"attributes": {"list": "ordered"}, "insert": "\n"}]}, "text": "Array Implementation for Disjoint Sets\n\nA basic way of maintaining a disjoint-set datastructure. \n\n\n\n\nSuppose the elements we are storing are in the range [1..n]. We maintain an array R of representatives, where R[i] is the representative of i, and define the operations on the datastructure as:\n\n\n\n\nMake-Set(x): Set R[x] = x. This is O(1).\nFind-Set(x): Return the value of R[x]. This is O(1).\nUnion(x,y): For each element i of R, if R[i] = x, then set R[i] = y. This is O(n) (!!)\n\n\n\n\nWe are not a fan of the O(n) Union(x,y) operation. We can do better. In particular, we might want to consider:\n\n\n\n\nLinked list implementations\nDisjoint Forests", "updatedAt": 1714599688095, "embeddings": ["-1.1229203", "-1.119133", "0.3702769", "-0.37922472", "-0.50561273", "-0.009016989", "-0.81712824", "1.1048301", "-1.6010196", "0.764611", "0.76309186", "-0.1347365", "-1.6325784", "-0.19148083", "1.6244123", "0.0670913", "0.080764405", "0.10695123", "0.019119954", "0.7238735", "1.5667226", "0.2678113", "0.87575126", "-1.1657349", "-0.33317497", "0.12752561", "0.24666765", "-1.6357605", "-2.1759694", "-0.95858485", "-1.7798791", "0.35055", "-0.19395216", "2.4058573", "0.83829457", "-0.7336197", "-0.51587063", "-1.719744", "1.8486776", "-1.6909336", "-0.7302003", "0.2553898", "0.088482", "-1.0152371", "1.5216744", "-0.18366228", "-0.061086733", "0.4237579", "-0.38233373", "0.42760614", "-0.67424726", "0.28652182", "0.64433163", "-0.6327279", "0.9017805", "-0.010290016", "1.4217936", "-0.07739511", "-1.7696047", "-0.78141946", "-1.0634313", "-1.0746387", "-0.45661828", "-1.6542902", "0.11846673", "0.72230804", "1.3727598", "1.5030273", "0.32040897", "1.4150463", "-1.4119679", "-0.84459", "1.7338052", "1.3594095", "-1.1731175", "-0.803137", "-0.92011106", "-0.16113679", "0.660456", "-0.908475", "-0.13402839", "-0.25052857", "0.007348522", "-0.5087288", "0.8478069", "-0.7043203", "-0.4625761", "-0.57445526", "-0.0722689", "0.6354679", "-0.11666213", "0.47429302", "0.46243843", "0.29141536", "0.678669", "2.5739286", "-1.3569646", "0.013753638", "-1.1428199", "-0.014563158", "-1.0456064", "0.40626833", "-0.6478295", "0.12420475", "1.1244671", "0.22134326", "-0.6411708", "0.7811925", "-0.056576002", "1.2399141", "0.95108163", "0.39218184", "0.5671442", "-1.9948853", "1.8803095", "-0.38380924", "-0.13616623", "-1.2982758", "0.18562946", "0.5772747", "0.34656104", "1.3997988", "-0.11088164", "0.8640776", "0.57850283", "-1.5643765", "-1.145471", "-0.9790352", "0.8327336", "1.4353127", "0.02356231", "1.8686082", "0.46712205", "-1.4384888", "0.16449776", "0.30706772", "-0.33761173", "0.28924188", "0.3402816", "0.5285036", "0.3417612", "-0.11537235", "-1.8014121", "0.76489305", "-1.0777628", "1.3655387", "0.73104155", "1.9408022", "0.31847", "1.2082394", "-1.0364772", "-0.31104928", "-0.5970771", "0.81028473", "1.6128513", "-0.1875069", "-0.43712673", "0.81743646", "-0.40606597", "0.68743783", "-0.5413816", "0.54344016", "-0.31817064", "-3.3460479", "-0.44538555", "0.060707185", "-0.4161735", "-2.2177203", "1.3471081", "0.30485976", "0.22376941", "0.47477317", "0.9457086", "0.48851156", "-0.82130116", "-0.46473426", "0.19252317", "-1.6447849", "1.1759963", "-0.96237797", "-0.07575424", "-0.6104764", "0.30554467", "0.22438976", "0.17242548", "-0.60126156", "0.6453894", "-0.29731834", "0.9500627", "-0.9551926", "-0.9574476", "-2.1820045", "-1.6535311", "-0.3916244", "0.72904485", "-1.3385315", "0.6359296", "0.09298665", "-0.086764775", "0.5141362"]}