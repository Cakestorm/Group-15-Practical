{"title": "Bipartite Matchings", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Bipartite Matchings"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "A "}, {"attributes": {"color": "#47a1b3"}, "insert": "bipartite graph"}, {"insert": " is an undirected "}, {"attributes": {"link": "#Graphs"}, "insert": "graph"}, {"insert": " "}, {"attributes": {"color": "#98add9"}, "insert": "G"}, {"insert": " with vertex set "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "V = L \\cup R"}}, {"insert": " , with edges only of the form "}, {"attributes": {"color": "#98add9"}, "insert": "(l,r)"}, {"insert": " or "}, {"attributes": {"color": "#98add9"}, "insert": "(r,l)"}, {"insert": ", with"}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "l \\in L"}}, {"insert": " and "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "r \\in R"}}, {"insert": " . Essentially, it is a "}, {"attributes": {"link": "#Graphs"}, "insert": "graph "}, {"insert": "split down the middle with edges only going between each half.\n\nA "}, {"attributes": {"color": "#47a1b3"}, "insert": "matching "}, {"attributes": {"color": "#98add9"}, "insert": "M"}, {"insert": " on a"}, {"attributes": {"color": "#47a1b3"}, "insert": " bipartite graph"}, {"insert": " is a subset of the graph's edges "}, {"attributes": {"color": "#98add9"}, "insert": "E"}, {"insert": ", with no two edges sharing an endpoint. The "}, {"attributes": {"color": "#47a1b3"}, "insert": "bipartite matching problem"}, {"insert": ", then, asks for the largest such matching on a given "}, {"attributes": {"color": "#47a1b3"}, "insert": "bipartite graph"}, {"insert": ". \n\nWe can solve such problems by using a "}, {"attributes": {"link": "#822d800b-7ce9-496b-8533-66c684217958"}, "insert": "max-flow algorithm"}, {"insert": ", such as the"}, {"attributes": {"link": "#Ford-Fulkerson"}, "insert": " Ford-Fulkerson"}, {"insert": " algorithm. We turn an instance of the "}, {"attributes": {"color": "#47a1b3"}, "insert": "bipartite matching problem"}, {"insert": " on "}, {"attributes": {"color": "#98add9"}, "insert": "G = "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "(L \\cup R, E)"}}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"insert": " into an instance of the"}, {"attributes": {"color": "#50c75a"}, "insert": " max-flow problem"}, {"insert": " on "}, {"attributes": {"link": "http://127.0.0.1:5000/#Flow_Networks"}, "insert": "flow network"}, {"insert": " ("}, {"attributes": {"color": "#98add9"}, "insert": "G'"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "s"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "t"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "c"}, {"insert": ") by:\n\nSetting "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "G' = G \\cup \\{ s,t \\}"}}, {"insert": " for fresh new vertices "}, {"attributes": {"color": "#98add9"}, "insert": "s"}, {"insert": " and "}, {"attributes": {"color": "#98add9"}, "insert": "t"}, {"insert": ", and setting those as the "}, {"attributes": {"color": "#98add9"}, "insert": "source "}, {"insert": "and "}, {"attributes": {"color": "#98add9"}, "insert": "sink "}, {"insert": "of the flow network respectively,"}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Adding new edges ("}, {"attributes": {"color": "#98add9"}, "insert": "s"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "l"}, {"insert": ") for all "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "l \\in L"}}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"insert": " and ("}, {"attributes": {"color": "#98add9"}, "insert": "r"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "t"}, {"insert": ") for all"}, {"attributes": {"color": "#98add9"}, "insert": " "}, {"attributes": {"color": "#98add9"}, "insert": {"formula": "r \\in R"}}, {"insert": " ,"}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Directing all edges to go from left to right (i.e. "}, {"attributes": {"color": "#98add9"}, "insert": "s -> L -> R -> t"}, {"insert": "), and"}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "Setting the capacity of all edges to "}, {"attributes": {"color": "#98add9"}, "insert": "1"}, {"insert": "."}, {"attributes": {"list": "ordered"}, "insert": "\n"}, {"insert": "\nThe value of a "}, {"attributes": {"link": "http://127.0.0.1:5000/#822d800b-7ce9-496b-8533-66c684217958"}, "insert": "max flow"}, {"insert": " on this graph therefore corresponds to the size of the "}, {"attributes": {"color": "#47a1b3"}, "insert": "largest bipartite matching"}, {"insert": ", and in fact if we consider the "}, {"attributes": {"link": "http://127.0.0.1:5000/#be624732-6b77-48a6-9e33-e8e833dd3d91"}, "insert": "residual graph"}, {"insert": " on this "}, {"attributes": {"color": "#98add9"}, "insert": "max flow"}, {"insert": ", then all edges going from right to left are members of this"}, {"attributes": {"color": "#47a1b3"}, "insert": " largest matching"}, {"insert": ".\n\nLet us "}, {"attributes": {"color": "#98add9"}, "insert": "prove "}, {"insert": "the above. For the"}, {"attributes": {"color": "#98add9"}, "insert": " <="}, {"insert": " direction, suppose we have a "}, {"attributes": {"color": "#47a1b3"}, "insert": "largest matching"}, {"attributes": {"color": "#98add9"}, "insert": " M"}, {"insert": ". Then, for each edge included in"}, {"attributes": {"color": "#98add9"}, "insert": " M"}, {"insert": ", we may send "}, {"attributes": {"color": "#98add9"}, "insert": "one unit of flow "}, {"insert": "along each of these edges in ("}, {"attributes": {"color": "#98add9"}, "insert": "G'"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "s"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "t"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "c"}, {"insert": "). Since we know that each vertex has only "}, {"attributes": {"color": "#98add9"}, "insert": "one such edge coming out of or going into it"}, {"insert": " in the flow network, we are guaranteed to be able to push "}, {"attributes": {"color": "#98add9"}, "insert": "one unit of flow "}, {"insert": "along it from "}, {"attributes": {"color": "#98add9"}, "insert": "s"}, {"insert": " to "}, {"attributes": {"color": "#98add9"}, "insert": "t"}, {"insert": ". Hence, the value of the "}, {"attributes": {"color": "#50c75a"}, "insert": "max flow"}, {"insert": " is at least the value of the "}, {"attributes": {"color": "#47a1b3"}, "insert": "largest matching"}, {"insert": ".\n\nFor the "}, {"attributes": {"color": "#98add9"}, "insert": "=>"}, {"insert": " direction, suppose we have a "}, {"attributes": {"color": "#50c75a"}, "insert": "max flow"}, {"insert": " on ("}, {"attributes": {"color": "#98add9"}, "insert": "G'"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "s"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "t"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "c"}, {"insert": "). Then, since we know the flow must be"}, {"attributes": {"color": "#52cca3"}, "insert": " "}, {"attributes": {"color": "#52cca3", "link": "#deb4f882-7fe1-4978-80c0-014f09a8c480"}, "insert": "integral"}, {"insert": ", and that for each "}, {"attributes": {"color": "#98add9"}, "insert": "edge"}, {"insert": " ("}, {"attributes": {"color": "#98add9"}, "insert": "l"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "r"}, {"insert": ") there is "}, {"attributes": {"color": "#98add9"}, "insert": "only one unit of flow "}, {"insert": "coming out of l, it follows that there is no vertex with more than "}, {"attributes": {"color": "#98add9"}, "insert": "one outgoing edg"}, {"insert": "e with a "}, {"attributes": {"color": "#98add9"}, "insert": "nonzero flow"}, {"insert": ". Hence, the set of edges in ("}, {"attributes": {"color": "#98add9"}, "insert": "G'"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "s"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "t"}, {"insert": ","}, {"attributes": {"color": "#98add9"}, "insert": "c"}, {"insert": ") with flow along them, excluding all edges from "}, {"attributes": {"color": "#98add9"}, "insert": "s"}, {"insert": " and to "}, {"attributes": {"color": "#98add9"}, "insert": "t"}, {"insert": ", gives us a "}, {"attributes": {"color": "#47a1b3"}, "insert": "matching"}, {"insert": ". So the size of the"}, {"attributes": {"color": "#47a1b3"}, "insert": " largest matching"}, {"insert": " is at least the value of the"}, {"attributes": {"color": "#50c75a"}, "insert": " max flow"}, {"insert": ".\n\nTaken together, it follows that the "}, {"attributes": {"color": "#98add9"}, "insert": "value "}, {"insert": "of the"}, {"attributes": {"color": "#50c75a"}, "insert": " max flow"}, {"insert": " must be equal to the size of the"}, {"attributes": {"color": "#47a1b3"}, "insert": " largest matching"}, {"insert": ".\n"}]}, "text": "Bipartite Matchings\n\nA bipartite graph is an undirected graph G with vertex set \ufeff\nV=L\u222aR\nV=L\u222aR\ufeff , with edges only of the form (l,r) or (r,l), with \ufeff\nl\u2208L\nl\u2208L\ufeff and \ufeff\nr\u2208R\nr\u2208R\ufeff . Essentially, it is a graph split down the middle with edges only going between each half.\n\n\n\n\nA matching M on a bipartite graph is a subset of the graph's edges E, with no two edges sharing an endpoint. The bipartite matching problem, then, asks for the largest such matching on a given bipartite graph. \n\n\n\n\nWe can solve such problems by using a max-flow algorithm, such as the Ford-Fulkerson algorithm. We turn an instance of the bipartite matching problem on G = \ufeff\n(L\u222aR,E)\n(L\u222aR,E)\ufeff  into an instance of the max-flow problem on flow network (G',s,t,c) by:\n\n\n\n\nSetting \ufeff\nG\u2032=G\u222a{s,t}\nG\n\u2032\n=G\u222a{s,t}\ufeff for fresh new vertices s and t, and setting those as the source and sink of the flow network respectively,\nAdding new edges (s,l) for all \ufeff\nl\u2208L\nl\u2208L\ufeff  and (r,t) for all \ufeff\nr\u2208R\nr\u2208R\ufeff ,\nDirecting all edges to go from left to right (i.e. s -> L -> R -> t), and\nSetting the capacity of all edges to 1.\n\n\n\n\nThe value of a max flow on this graph therefore corresponds to the size of the largest bipartite matching, and in fact if we consider the residual graph on this max flow, then all edges going from right to left are members of this largest matching.\n\n\n\n\nLet us prove the above. For the <= direction, suppose we have a largest matching M. Then, for each edge included in M, we may send one unit of flow along each of these edges in (G',s,t,c). Since we know that each vertex has only one such edge coming out of or going into it in the flow network, we are guaranteed to be able to push one unit of flow along it from s to t. Hence, the value of the max flow is at least the value of the largest matching.\n\n\n\n\nFor the => direction, suppose we have a max flow on (G',s,t,c). Then, since we know the flow must be integral, and that for each edge (l,r) there is only one unit of flow coming out of l, it follows that there is no vertex with more than one outgoing edge with a nonzero flow. Hence, the set of edges in (G',s,t,c) with flow along them, excluding all edges from s and to t, gives us a matching. So the size of the largest matching is at least the value of the max flow.\n\n\n\n\nTaken together, it follows that the value of the max flow must be equal to the size of the largest matching.", "updatedAt": 1714739076812}