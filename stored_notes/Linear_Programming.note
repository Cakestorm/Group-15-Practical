{"title": "Linear Programming", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Linear Programming"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "A method of formalising many different problems in terms of a set of constraints, and some objective function to maximise/minimise with regards to those constraints.\n\nIn the "}, {"attributes": {"link": "#Algorithms_and_Data_Structures"}, "insert": "ADS"}, {"insert": " course, we chiefly consider "}, {"attributes": {"color": "#47a1b3"}, "insert": "LP"}, {"insert": "s in "}, {"attributes": {"color": "#98add9"}, "insert": "Standard Maximum Form"}, {"insert": ":\n\nMaximise:     "}, {"insert": {"formula": "c^Tx"}}, {"insert": " \nSubject to:  "}, {"insert": {"formula": "Ax \\leq b"}}, {"insert": " \n                      "}, {"insert": {"formula": "x \\geq 0"}}, {"insert": " \n\nLet's consider some problems from elsewhere in the course formalised as LPs to get an idea of how powerful they are in representing problems.\n\n"}, {"attributes": {"color": "#52cca3", "link": "#822d800b-7ce9-496b-8533-66c684217958"}, "insert": "Max Flow"}, {"attributes": {"color": "#edfaff"}, "insert": ":"}, {"insert": "\n\nMaximise:     "}, {"insert": {"formula": "\\sum\\limits_{\\text{$e$ out of $s$}} f(e)"}}, {"insert": " \nSubject to:  "}, {"insert": {"formula": "f(e)  \\geq 0"}}, {"insert": " \n                   "}, {"insert": {"formula": "f(e) \\leq c(e)"}}, {"insert": " \n                "}, {"insert": {"formula": "\\sum\\limits_{e \\text{ out of } u} f(e) - \\sum\\limits_{e \\text{ into } u} f(e) = 0"}}, {"insert": " for all "}, {"insert": {"formula": "v \\in V \\setminus \\{s,t\\}"}}, {"insert": " \n\nWhere we interpret the variable "}, {"insert": {"formula": "f(e)"}}, {"insert": " as the flow along edge "}, {"insert": {"formula": "e"}}, {"insert": ".\n\n"}, {"attributes": {"link": "#Circulations"}, "insert": "Circulations"}, {"insert": ":\n\nThis is a feasibility problem, not a maximisation problem, and so we set the objective function to be a constant. (This can be useful with regards to duality!)\n\nMaximise:    "}, {"insert": {"formula": "0"}}, {"insert": " \nSubject to:  "}, {"insert": {"formula": "l(e) \\leq f_e \\leq c(e)"}}, {"insert": " \n               "}, {"insert": {"formula": "\\sum\\limits_{e \\text{ out of } u} f(e) - \\sum\\limits_{e \\text{ into } u} f(e) = d(e)"}}, {"insert": " \n      \nAgain, interpreting "}, {"insert": {"formula": "f_e"}}, {"insert": " as the flow along edge "}, {"insert": {"formula": "e"}}, {"insert": " .\n\n"}]}, "text": "Linear Programming\n\nA method of formalising many different problems in terms of a set of constraints, and some objective function to maximise/minimise with regards to those constraints.\n\n\n\n\nIn the ADS course, we chiefly consider LPs in Standard Maximum Form:\n\n\n\n\nMaximise:     \ufeff\ncTx\nc\nT\nx\ufeff \n\nSubject to:  \ufeff\nAx\u2264b\nAx\u2264b\ufeff \n\n                      \ufeff\nx\u22650\nx\u22650\ufeff \n\n\n\n\nLet's consider some problems from elsewhere in the course formalised as LPs to get an idea of how powerful they are in representing problems.\n\n\n\n\nMax Flow:\n\n\n\n\nMaximise:     \ufeff\n\u2211e\u00a0out\u00a0of\u00a0sf(e)\ne\u00a0out\u00a0of\u00a0s\n\u2211\n\t\u200b\n\nf(e)\ufeff \n\nSubject to:  \ufeff\nf(e)\u22650\nf(e)\u22650\ufeff \n\n                   \ufeff\nf(e)\u2264c(e)\nf(e)\u2264c(e)\ufeff \n\n                \ufeff\n\u2211e\u00a0out\u00a0of\u00a0uf(e)\u2212\u2211e\u00a0into\u00a0uf(e)=0\ne\u00a0out\u00a0of\u00a0u\n\u2211\n\t\u200b\n\nf(e)\u2212\ne\u00a0into\u00a0u\n\u2211\n\t\u200b\n\nf(e)=0\ufeff for all \ufeff\nv\u2208V\u2216{s,t}\nv\u2208V\u2216{s,t}\ufeff \n\n\n\n\nWhere we interpret the variable \ufeff\nf(e)\nf(e)\ufeff as the flow along edge \ufeff\ne\ne\ufeff.\n\n\n\n\nCirculations:\n\n\n\n\nThis is a feasibility problem, not a maximisation problem, and so we set the objective function to be a constant. (This can be useful with regards to duality!)\n\n\n\n\nMaximise:    \ufeff\n0\n0\ufeff \n\nSubject to:  \ufeff\nl(e)\u2264fe\u2264c(e)\nl(e)\u2264f\ne\n\t\u200b\n\n\u2264c(e)\ufeff \n\n               \ufeff\n\u2211e\u00a0out\u00a0of\u00a0uf(e)\u2212\u2211e\u00a0into\u00a0uf(e)=d(e)\ne\u00a0out\u00a0of\u00a0u\n\u2211\n\t\u200b\n\nf(e)\u2212\ne\u00a0into\u00a0u\n\u2211\n\t\u200b\n\nf(e)=d(e)\ufeff \n\n      \n\nAgain, interpreting \ufeff\nfe\nf\ne\n\t\u200b\n\n\ufeff as the flow along edge \ufeff\ne\ne\ufeff .\n\n\n", "updatedAt": 1714750523285}