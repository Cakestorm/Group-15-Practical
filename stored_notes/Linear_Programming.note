{"title": "Linear Programming", "body": {"ops": [{"attributes": {"color": "#47a1b3", "underline": true}, "insert": "Linear Programming"}, {"attributes": {"header": 2}, "insert": "\n"}, {"insert": "A method of formalising many different problems in terms of a set of constraints, and some objective function to maximise/minimise with regards to those constraints.\n\nIn the "}, {"attributes": {"link": "#Algorithms_and_Data_Structures"}, "insert": "ADS"}, {"insert": " course, we chiefly consider "}, {"attributes": {"color": "#47a1b3"}, "insert": "LP"}, {"insert": "s in "}, {"attributes": {"color": "#98add9"}, "insert": "Standard Maximum Form"}, {"insert": ":\n\nMaximise:     "}, {"insert": {"formula": "c^Tx"}}, {"insert": " \nSubject to:  "}, {"insert": {"formula": "Ax \\leq b"}}, {"insert": " \n                      "}, {"insert": {"formula": "x \\geq 0"}}, {"insert": " \n\nLet's consider some problems from elsewhere in the course formalised as LPs to get an idea of how powerful they are in representing problems.\n\n"}, {"attributes": {"color": "#52cca3", "link": "#822d800b-7ce9-496b-8533-66c684217958"}, "insert": "Max Flow"}, {"attributes": {"color": "#edfaff"}, "insert": ":"}, {"insert": "\n\nMaximise:     "}, {"insert": {"formula": "\\sum\\limits_{\\text{$e$ out of $s$}} f(e)"}}, {"insert": " \nSubject to:  "}, {"insert": {"formula": "f(e)  \\geq 0"}}, {"insert": " \n                   "}, {"insert": {"formula": "f(e) \\leq c(e)"}}, {"insert": " \n                "}, {"insert": {"formula": "\\sum\\limits_{e \\text{ out of } u} f(e) - \\sum\\limits_{e \\text{ into } u} f(e) = 0"}}, {"insert": " for all "}, {"insert": {"formula": "v \\in V \\setminus \\{s,t\\}"}}, {"insert": " \n\nWhere we interpret the variable "}, {"insert": {"formula": "f(e)"}}, {"insert": " as the flow along edge "}, {"insert": {"formula": "e"}}, {"insert": ".\n\n"}, {"attributes": {"link": "#Circulations"}, "insert": "Circulations"}, {"insert": ":\n\nThis is a feasibility problem, not a maximisation problem, and so we set the objective function to be a constant. (This can be useful with regards to duality!)\n\nMaximise:    "}, {"insert": {"formula": "0"}}, {"insert": " \nSubject to:  "}, {"insert": {"formula": "l(e) \\leq f_e \\leq c(e)"}}, {"insert": " \n               "}, {"insert": {"formula": "\\sum\\limits_{e \\text{ out of } u} f(e) - \\sum\\limits_{e \\text{ into } u} f(e) = d(e)"}}, {"insert": " \n      \nAgain, interpreting "}, {"insert": {"formula": "f_e"}}, {"insert": " as the flow along edge "}, {"insert": {"formula": "e"}}, {"insert": " .\n\n"}]}, "text": "Linear Programming\n\nA method of formalising many different problems in terms of a set of constraints, and some objective function to maximise/minimise with regards to those constraints.\n\n\n\n\nIn the ADS course, we chiefly consider LPs in Standard Maximum Form:\n\n\n\n\nMaximise:     \ufeff\ncTx\nc\nT\nx\ufeff \n\nSubject to:  \ufeff\nAx\u2264b\nAx\u2264b\ufeff \n\n                      \ufeff\nx\u22650\nx\u22650\ufeff \n\n\n\n\nLet's consider some problems from elsewhere in the course formalised as LPs to get an idea of how powerful they are in representing problems.\n\n\n\n\nMax Flow:\n\n\n\n\nMaximise:     \ufeff\n\u2211e\u00a0out\u00a0of\u00a0sf(e)\ne\u00a0out\u00a0of\u00a0s\n\u2211\n\t\u200b\n\nf(e)\ufeff \n\nSubject to:  \ufeff\nf(e)\u22650\nf(e)\u22650\ufeff \n\n                   \ufeff\nf(e)\u2264c(e)\nf(e)\u2264c(e)\ufeff \n\n                \ufeff\n\u2211e\u00a0out\u00a0of\u00a0uf(e)\u2212\u2211e\u00a0into\u00a0uf(e)=0\ne\u00a0out\u00a0of\u00a0u\n\u2211\n\t\u200b\n\nf(e)\u2212\ne\u00a0into\u00a0u\n\u2211\n\t\u200b\n\nf(e)=0\ufeff for all \ufeff\nv\u2208V\u2216{s,t}\nv\u2208V\u2216{s,t}\ufeff \n\n\n\n\nWhere we interpret the variable \ufeff\nf(e)\nf(e)\ufeff as the flow along edge \ufeff\ne\ne\ufeff.\n\n\n\n\nCirculations:\n\n\n\n\nThis is a feasibility problem, not a maximisation problem, and so we set the objective function to be a constant. (This can be useful with regards to duality!)\n\n\n\n\nMaximise:    \ufeff\n0\n0\ufeff \n\nSubject to:  \ufeff\nl(e)\u2264fe\u2264c(e)\nl(e)\u2264f\ne\n\t\u200b\n\n\u2264c(e)\ufeff \n\n               \ufeff\n\u2211e\u00a0out\u00a0of\u00a0uf(e)\u2212\u2211e\u00a0into\u00a0uf(e)=d(e)\ne\u00a0out\u00a0of\u00a0u\n\u2211\n\t\u200b\n\nf(e)\u2212\ne\u00a0into\u00a0u\n\u2211\n\t\u200b\n\nf(e)=d(e)\ufeff \n\n      \n\nAgain, interpreting \ufeff\nfe\nf\ne\n\t\u200b\n\n\ufeff as the flow along edge \ufeff\ne\ne\ufeff .\n\n\n", "updatedAt": 1714750523285, "embeddings": ["-0.12565318", "-2.592612", "-0.06326701", "0.39343697", "-0.16640246", "-1.5773818", "0.29551294", "1.1073599", "-1.4283553", "0.49515876", "1.3421451", "-0.8315315", "-1.1902672", "1.3745248", "0.74248016", "-1.4481063", "-1.2739724", "-0.2755453", "-0.7559265", "-0.83050823", "-1.2783111", "-0.27936047", "-0.6142494", "-0.29253778", "0.6853199", "0.47060868", "-0.8494695", "-3.1718452", "-2.6223812", "-0.2679833", "-0.687882", "0.5405654", "0.22463058", "2.3301275", "0.48591238", "-0.8928408", "1.0506954", "-0.23526461", "1.169098", "0.4314823", "-1.7310673", "-0.6295448", "0.69133055", "-0.6705608", "-0.58834964", "-0.06720273", "1.608055", "0.9516402", "0.03909734", "-1.4047374", "1.3342706", "-1.2389064", "0.6424018", "-0.58305717", "-1.1205574", "0.90457463", "2.0362225", "0.037202086", "-1.1215959", "-0.06524879", "-0.8030928", "-0.6562341", "-0.0048037707", "0.9342739", "-0.5162341", "1.8872824", "-0.7596196", "1.1617042", "-0.3600267", "-0.58659005", "-1.1218121", "0.6257655", "-0.38790667", "1.495894", "2.1500854", "0.016083444", "1.211231", "1.1420032", "-0.67775685", "0.040868744", "-0.53646183", "-0.1330721", "0.07095676", "0.6666137", "1.3820698", "0.9829832", "0.099689506", "0.16767815", "-0.93638676", "0.20150518", "2.703689", "1.1747358", "2.7891655", "-0.86015624", "0.2532032", "-0.49294102", "-0.60497904", "-0.13396895", "-0.98608655", "-0.07778583", "-0.8847994", "-0.3556251", "1.277935", "0.018772662", "-0.95654595", "0.92492306", "0.7278152", "2.4357111", "-0.81070817", "0.4161072", "0.48454598", "1.4561076", "-0.6094207", "1.0459459", "0.20125176", "-0.21430594", "0.11462115", "1.166914", "-0.6291266", "0.053345427", "1.0511262", "1.3658463", "-2.1725469", "-0.41180834", "-1.1050942", "0.02420702", "-0.5447722", "1.2300553", "-0.20144287", "0.9391756", "-0.44274777", "-0.8074412", "-0.2512733", "-1.0405688", "2.6585689", "0.36422533", "0.100573", "0.7562283", "-0.2209215", "0.929942", "2.1267977", "-1.6789551", "-0.7837188", "-0.6402729", "-0.799437", "1.4690174", "0.80607325", "-0.17322046", "2.0008864", "1.3263859", "-2.8325455", "-1.5478975", "-0.04312857", "-2.6961982", "2.9864361", "-0.37084168", "0.2801516", "-0.1407727", "-0.26892856", "-0.36265787", "-3.1209173", "0.29450896", "0.8068427", "-0.7073808", "-0.22734316", "-1.2586687", "1.5541104", "-2.31534", "1.0958273", "2.5318859", "1.2604477", "0.3686215", "0.82145983", "0.82027864", "0.7581313", "0.1969018", "0.92629117", "-0.3346678", "-1.0824735", "0.8796113", "-1.5942951", "-0.6653612", "0.37457943", "-2.3601556", "-0.95241773", "-1.4492081", "-0.6502114", "-0.32706243", "-0.7320709", "0.24841705", "-0.67824554", "0.18916896", "-0.017335713", "-0.12895271", "0.81831956", "0.3771296", "-1.1198821", "-0.40741614", "0.15096581", "0.3199696"]}